
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d40  08002d40  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d40  08002d40  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d40  08002d40  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d40  08002d40  00012d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000005c  08002da4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002da4  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009651  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf3  00000000  00000000  000296d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ed3  00000000  00000000  0002c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf1b  00000000  00000000  00043683  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822d9  00000000  00000000  0004f59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1877  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a0  00000000  00000000  000d18cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d08 	.word	0x08002d08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002d08 	.word	0x08002d08

0800014c <subKeyProcess>:
		return 1;
	}
	return 0;
}

void subKeyProcess(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	Mode++;
 8000150:	4b2a      	ldr	r3, [pc, #168]	; (80001fc <subKeyProcess+0xb0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3301      	adds	r3, #1
 8000156:	4a29      	ldr	r2, [pc, #164]	; (80001fc <subKeyProcess+0xb0>)
 8000158:	6013      	str	r3, [r2, #0]
	if(Mode > 4){
 800015a:	4b28      	ldr	r3, [pc, #160]	; (80001fc <subKeyProcess+0xb0>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b04      	cmp	r3, #4
 8000160:	dd02      	ble.n	8000168 <subKeyProcess+0x1c>
		Mode = 1;
 8000162:	4b26      	ldr	r3, [pc, #152]	; (80001fc <subKeyProcess+0xb0>)
 8000164:	2201      	movs	r2, #1
 8000166:	601a      	str	r2, [r3, #0]
	}
	switch(Mode){
 8000168:	4b24      	ldr	r3, [pc, #144]	; (80001fc <subKeyProcess+0xb0>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	3b01      	subs	r3, #1
 800016e:	2b03      	cmp	r3, #3
 8000170:	d841      	bhi.n	80001f6 <subKeyProcess+0xaa>
 8000172:	a201      	add	r2, pc, #4	; (adr r2, 8000178 <subKeyProcess+0x2c>)
 8000174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000178:	08000189 	.word	0x08000189
 800017c:	08000197 	.word	0x08000197
 8000180:	080001b7 	.word	0x080001b7
 8000184:	080001d7 	.word	0x080001d7
	case 1:
		timeReplace = 0;
 8000188:	4b1d      	ldr	r3, [pc, #116]	; (8000200 <subKeyProcess+0xb4>)
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
		displayReplaceTIME(0);
 800018e:	2000      	movs	r0, #0
 8000190:	f000 fd02 	bl	8000b98 <displayReplaceTIME>
		break;
 8000194:	e030      	b.n	80001f8 <subKeyProcess+0xac>
	case 2:
		timeReplace = timeRED;
 8000196:	4b1b      	ldr	r3, [pc, #108]	; (8000204 <subKeyProcess+0xb8>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	4a19      	ldr	r2, [pc, #100]	; (8000200 <subKeyProcess+0xb4>)
 800019c:	6013      	str	r3, [r2, #0]
		displayReplaceTIME(timeRED/100);
 800019e:	4b19      	ldr	r3, [pc, #100]	; (8000204 <subKeyProcess+0xb8>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a19      	ldr	r2, [pc, #100]	; (8000208 <subKeyProcess+0xbc>)
 80001a4:	fb82 1203 	smull	r1, r2, r2, r3
 80001a8:	1152      	asrs	r2, r2, #5
 80001aa:	17db      	asrs	r3, r3, #31
 80001ac:	1ad3      	subs	r3, r2, r3
 80001ae:	4618      	mov	r0, r3
 80001b0:	f000 fcf2 	bl	8000b98 <displayReplaceTIME>
		break;
 80001b4:	e020      	b.n	80001f8 <subKeyProcess+0xac>
	case 3:
		timeReplace = timeYELLOW;
 80001b6:	4b15      	ldr	r3, [pc, #84]	; (800020c <subKeyProcess+0xc0>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a11      	ldr	r2, [pc, #68]	; (8000200 <subKeyProcess+0xb4>)
 80001bc:	6013      	str	r3, [r2, #0]
		displayReplaceTIME(timeYELLOW/100);
 80001be:	4b13      	ldr	r3, [pc, #76]	; (800020c <subKeyProcess+0xc0>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	4a11      	ldr	r2, [pc, #68]	; (8000208 <subKeyProcess+0xbc>)
 80001c4:	fb82 1203 	smull	r1, r2, r2, r3
 80001c8:	1152      	asrs	r2, r2, #5
 80001ca:	17db      	asrs	r3, r3, #31
 80001cc:	1ad3      	subs	r3, r2, r3
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fce2 	bl	8000b98 <displayReplaceTIME>
		break;
 80001d4:	e010      	b.n	80001f8 <subKeyProcess+0xac>
	case 4:
		timeReplace = timeGREEN;
 80001d6:	4b0e      	ldr	r3, [pc, #56]	; (8000210 <subKeyProcess+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a09      	ldr	r2, [pc, #36]	; (8000200 <subKeyProcess+0xb4>)
 80001dc:	6013      	str	r3, [r2, #0]
		displayReplaceTIME(timeGREEN/100);
 80001de:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <subKeyProcess+0xc4>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a09      	ldr	r2, [pc, #36]	; (8000208 <subKeyProcess+0xbc>)
 80001e4:	fb82 1203 	smull	r1, r2, r2, r3
 80001e8:	1152      	asrs	r2, r2, #5
 80001ea:	17db      	asrs	r3, r3, #31
 80001ec:	1ad3      	subs	r3, r2, r3
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 fcd2 	bl	8000b98 <displayReplaceTIME>
		break;
 80001f4:	e000      	b.n	80001f8 <subKeyProcess+0xac>
	default:
		break;
 80001f6:	bf00      	nop
	}
}
 80001f8:	bf00      	nop
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000048 	.word	0x20000048
 8000200:	20000080 	.word	0x20000080
 8000204:	2000003c 	.word	0x2000003c
 8000208:	51eb851f 	.word	0x51eb851f
 800020c:	20000044 	.word	0x20000044
 8000210:	20000040 	.word	0x20000040

08000214 <getKeyInput>:

void getKeyInput(){
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000218:	4b1f      	ldr	r3, [pc, #124]	; (8000298 <getKeyInput+0x84>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a1f      	ldr	r2, [pc, #124]	; (800029c <getKeyInput+0x88>)
 800021e:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 8000220:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <getKeyInput+0x8c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a1c      	ldr	r2, [pc, #112]	; (8000298 <getKeyInput+0x84>)
 8000226:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000228:	2101      	movs	r1, #1
 800022a:	481e      	ldr	r0, [pc, #120]	; (80002a4 <getKeyInput+0x90>)
 800022c:	f001 fd2c 	bl	8001c88 <HAL_GPIO_ReadPin>
 8000230:	4603      	mov	r3, r0
 8000232:	461a      	mov	r2, r3
 8000234:	4b1a      	ldr	r3, [pc, #104]	; (80002a0 <getKeyInput+0x8c>)
 8000236:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <getKeyInput+0x84>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <getKeyInput+0x8c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	429a      	cmp	r2, r3
 8000242:	d126      	bne.n	8000292 <getKeyInput+0x7e>
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <getKeyInput+0x84>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4b14      	ldr	r3, [pc, #80]	; (800029c <getKeyInput+0x88>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	429a      	cmp	r2, r3
 800024e:	d120      	bne.n	8000292 <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 8000250:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0x88>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <getKeyInput+0x94>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	429a      	cmp	r2, r3
 800025a:	d00e      	beq.n	800027a <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <getKeyInput+0x88>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a11      	ldr	r2, [pc, #68]	; (80002a8 <getKeyInput+0x94>)
 8000262:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <getKeyInput+0x94>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d112      	bne.n	8000292 <getKeyInput+0x7e>
        TimeOutForKeyPress = 500;
 800026c:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <getKeyInput+0x98>)
 800026e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000272:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 8000274:	f7ff ff6a 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 8000278:	e00b      	b.n	8000292 <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <getKeyInput+0x98>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	3b01      	subs	r3, #1
 8000280:	4a0a      	ldr	r2, [pc, #40]	; (80002ac <getKeyInput+0x98>)
 8000282:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <getKeyInput+0x98>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d102      	bne.n	8000292 <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <getKeyInput+0x94>)
 800028e:	2201      	movs	r2, #1
 8000290:	601a      	str	r2, [r3, #0]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000
 80002a4:	40010c00 	.word	0x40010c00
 80002a8:	2000000c 	.word	0x2000000c
 80002ac:	20000010 	.word	0x20000010

080002b0 <subKeyProcess2>:
		return 1;
	}
	return 0;
}

void subKeyProcess2(){
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	timeReplace = timeReplace +100;
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <subKeyProcess2+0x28>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3364      	adds	r3, #100	; 0x64
 80002ba:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <subKeyProcess2+0x28>)
 80002bc:	6013      	str	r3, [r2, #0]
	displayReplaceTIME(timeReplace/100);
 80002be:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <subKeyProcess2+0x28>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a06      	ldr	r2, [pc, #24]	; (80002dc <subKeyProcess2+0x2c>)
 80002c4:	fb82 1203 	smull	r1, r2, r2, r3
 80002c8:	1152      	asrs	r2, r2, #5
 80002ca:	17db      	asrs	r3, r3, #31
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	4618      	mov	r0, r3
 80002d0:	f000 fc62 	bl	8000b98 <displayReplaceTIME>
}
 80002d4:	bf00      	nop
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000080 	.word	0x20000080
 80002dc:	51eb851f 	.word	0x51eb851f

080002e0 <getKeyInput2>:

void getKeyInput2(){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  keyReg2 = keyReg1;
 80002e4:	4b1f      	ldr	r3, [pc, #124]	; (8000364 <getKeyInput2+0x84>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1f      	ldr	r2, [pc, #124]	; (8000368 <getKeyInput2+0x88>)
 80002ea:	6013      	str	r3, [r2, #0]
  keyReg1 = keyReg0;
 80002ec:	4b1f      	ldr	r3, [pc, #124]	; (800036c <getKeyInput2+0x8c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <getKeyInput2+0x84>)
 80002f2:	6013      	str	r3, [r2, #0]
  keyReg0 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80002f4:	2102      	movs	r1, #2
 80002f6:	481e      	ldr	r0, [pc, #120]	; (8000370 <getKeyInput2+0x90>)
 80002f8:	f001 fcc6 	bl	8001c88 <HAL_GPIO_ReadPin>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <getKeyInput2+0x8c>)
 8000302:	601a      	str	r2, [r3, #0]
  if ((keyReg1 == keyReg0) && (keyReg1 == keyReg2)){
 8000304:	4b17      	ldr	r3, [pc, #92]	; (8000364 <getKeyInput2+0x84>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <getKeyInput2+0x8c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	429a      	cmp	r2, r3
 800030e:	d126      	bne.n	800035e <getKeyInput2+0x7e>
 8000310:	4b14      	ldr	r3, [pc, #80]	; (8000364 <getKeyInput2+0x84>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <getKeyInput2+0x88>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	429a      	cmp	r2, r3
 800031a:	d120      	bne.n	800035e <getKeyInput2+0x7e>
    if (keyReg2 != keyReg3){
 800031c:	4b12      	ldr	r3, [pc, #72]	; (8000368 <getKeyInput2+0x88>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <getKeyInput2+0x94>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	429a      	cmp	r2, r3
 8000326:	d00e      	beq.n	8000346 <getKeyInput2+0x66>
      keyReg3 = keyReg2;
 8000328:	4b0f      	ldr	r3, [pc, #60]	; (8000368 <getKeyInput2+0x88>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a11      	ldr	r2, [pc, #68]	; (8000374 <getKeyInput2+0x94>)
 800032e:	6013      	str	r3, [r2, #0]

      if (keyReg3 == PRESSED_STATE){
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <getKeyInput2+0x94>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d112      	bne.n	800035e <getKeyInput2+0x7e>
        TimeOutForKeyPress2 = 500;
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <getKeyInput2+0x98>)
 800033a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800033e:	601a      	str	r2, [r3, #0]
        subKeyProcess2();
 8000340:	f7ff ffb6 	bl	80002b0 <subKeyProcess2>
        if (TimeOutForKeyPress2 == 0){
          keyReg3 = NORMAL_STATE;
        }
    }
  }
}
 8000344:	e00b      	b.n	800035e <getKeyInput2+0x7e>
       TimeOutForKeyPress2 --;
 8000346:	4b0c      	ldr	r3, [pc, #48]	; (8000378 <getKeyInput2+0x98>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <getKeyInput2+0x98>)
 800034e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress2 == 0){
 8000350:	4b09      	ldr	r3, [pc, #36]	; (8000378 <getKeyInput2+0x98>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d102      	bne.n	800035e <getKeyInput2+0x7e>
          keyReg3 = NORMAL_STATE;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <getKeyInput2+0x94>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000018 	.word	0x20000018
 8000368:	2000001c 	.word	0x2000001c
 800036c:	20000014 	.word	0x20000014
 8000370:	40010c00 	.word	0x40010c00
 8000374:	20000020 	.word	0x20000020
 8000378:	20000024 	.word	0x20000024

0800037c <subKeyProcess3>:
		return 1;
	}
	return 0;
}

void subKeyProcess3(){
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	switch(Mode){
 8000380:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <subKeyProcess3+0x54>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	2b03      	cmp	r3, #3
 8000388:	d81d      	bhi.n	80003c6 <subKeyProcess3+0x4a>
 800038a:	a201      	add	r2, pc, #4	; (adr r2, 8000390 <subKeyProcess3+0x14>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a1 	.word	0x080003a1
 8000394:	080003a9 	.word	0x080003a9
 8000398:	080003b3 	.word	0x080003b3
 800039c:	080003bd 	.word	0x080003bd
	case 1:
		timeReplace = 0;
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <subKeyProcess3+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
		break;
 80003a6:	e00f      	b.n	80003c8 <subKeyProcess3+0x4c>
	case 2:
		timeRED = timeReplace;
 80003a8:	4b0a      	ldr	r3, [pc, #40]	; (80003d4 <subKeyProcess3+0x58>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0a      	ldr	r2, [pc, #40]	; (80003d8 <subKeyProcess3+0x5c>)
 80003ae:	6013      	str	r3, [r2, #0]
		break;
 80003b0:	e00a      	b.n	80003c8 <subKeyProcess3+0x4c>
	case 3:
		timeYELLOW = timeReplace;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <subKeyProcess3+0x58>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	4a09      	ldr	r2, [pc, #36]	; (80003dc <subKeyProcess3+0x60>)
 80003b8:	6013      	str	r3, [r2, #0]
		break;
 80003ba:	e005      	b.n	80003c8 <subKeyProcess3+0x4c>
	case 4:
		timeGREEN = timeReplace;
 80003bc:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <subKeyProcess3+0x58>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a07      	ldr	r2, [pc, #28]	; (80003e0 <subKeyProcess3+0x64>)
 80003c2:	6013      	str	r3, [r2, #0]
		break;
 80003c4:	e000      	b.n	80003c8 <subKeyProcess3+0x4c>
	default:
		break;
 80003c6:	bf00      	nop
	}
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	20000048 	.word	0x20000048
 80003d4:	20000080 	.word	0x20000080
 80003d8:	2000003c 	.word	0x2000003c
 80003dc:	20000044 	.word	0x20000044
 80003e0:	20000040 	.word	0x20000040

080003e4 <getKeyInput3>:

void getKeyInput3(){
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  keyreg2 = keyreg1;
 80003e8:	4b1f      	ldr	r3, [pc, #124]	; (8000468 <getKeyInput3+0x84>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a1f      	ldr	r2, [pc, #124]	; (800046c <getKeyInput3+0x88>)
 80003ee:	6013      	str	r3, [r2, #0]
  keyreg1 = keyreg0;
 80003f0:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <getKeyInput3+0x8c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a1c      	ldr	r2, [pc, #112]	; (8000468 <getKeyInput3+0x84>)
 80003f6:	6013      	str	r3, [r2, #0]
  keyreg0 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80003f8:	2104      	movs	r1, #4
 80003fa:	481e      	ldr	r0, [pc, #120]	; (8000474 <getKeyInput3+0x90>)
 80003fc:	f001 fc44 	bl	8001c88 <HAL_GPIO_ReadPin>
 8000400:	4603      	mov	r3, r0
 8000402:	461a      	mov	r2, r3
 8000404:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <getKeyInput3+0x8c>)
 8000406:	601a      	str	r2, [r3, #0]
  if ((keyreg1 == keyreg0) && (keyreg1 == keyreg2)){
 8000408:	4b17      	ldr	r3, [pc, #92]	; (8000468 <getKeyInput3+0x84>)
 800040a:	681a      	ldr	r2, [r3, #0]
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <getKeyInput3+0x8c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	429a      	cmp	r2, r3
 8000412:	d126      	bne.n	8000462 <getKeyInput3+0x7e>
 8000414:	4b14      	ldr	r3, [pc, #80]	; (8000468 <getKeyInput3+0x84>)
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <getKeyInput3+0x88>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	429a      	cmp	r2, r3
 800041e:	d120      	bne.n	8000462 <getKeyInput3+0x7e>
    if (keyreg2 != keyreg3){
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <getKeyInput3+0x88>)
 8000422:	681a      	ldr	r2, [r3, #0]
 8000424:	4b14      	ldr	r3, [pc, #80]	; (8000478 <getKeyInput3+0x94>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	429a      	cmp	r2, r3
 800042a:	d00e      	beq.n	800044a <getKeyInput3+0x66>
      keyreg3 = keyreg2;
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <getKeyInput3+0x88>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a11      	ldr	r2, [pc, #68]	; (8000478 <getKeyInput3+0x94>)
 8000432:	6013      	str	r3, [r2, #0]

      if (keyreg3 == PRESSED_STATE){
 8000434:	4b10      	ldr	r3, [pc, #64]	; (8000478 <getKeyInput3+0x94>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d112      	bne.n	8000462 <getKeyInput3+0x7e>
        TimeOutForKeyPress3 = 500;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <getKeyInput3+0x98>)
 800043e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000442:	601a      	str	r2, [r3, #0]
        subKeyProcess3();
 8000444:	f7ff ff9a 	bl	800037c <subKeyProcess3>
        if (TimeOutForKeyPress3 == 0){
          keyreg3 = NORMAL_STATE;
        }
    }
  }
}
 8000448:	e00b      	b.n	8000462 <getKeyInput3+0x7e>
       TimeOutForKeyPress3 --;
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <getKeyInput3+0x98>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3b01      	subs	r3, #1
 8000450:	4a0a      	ldr	r2, [pc, #40]	; (800047c <getKeyInput3+0x98>)
 8000452:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress3 == 0){
 8000454:	4b09      	ldr	r3, [pc, #36]	; (800047c <getKeyInput3+0x98>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d102      	bne.n	8000462 <getKeyInput3+0x7e>
          keyreg3 = NORMAL_STATE;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <getKeyInput3+0x94>)
 800045e:	2201      	movs	r2, #1
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2000002c 	.word	0x2000002c
 800046c:	20000030 	.word	0x20000030
 8000470:	20000028 	.word	0x20000028
 8000474:	40010c00 	.word	0x40010c00
 8000478:	20000034 	.word	0x20000034
 800047c:	20000038 	.word	0x20000038

08000480 <display7SEG>:
 *  Created on: Oct 23, 2022
 *      Author: ACER
 */
#include "display7SEG.h"
#include "main.h"
void display7SEG(int counter){
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	if(counter == 0){
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d127      	bne.n	80004de <display7SEG+0x5e>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	48d2      	ldr	r0, [pc, #840]	; (80007dc <display7SEG+0x35c>)
 8000494:	f001 fc0f 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2180      	movs	r1, #128	; 0x80
 800049c:	48cf      	ldr	r0, [pc, #828]	; (80007dc <display7SEG+0x35c>)
 800049e:	f001 fc0a 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a8:	48cc      	ldr	r0, [pc, #816]	; (80007dc <display7SEG+0x35c>)
 80004aa:	f001 fc04 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b4:	48c9      	ldr	r0, [pc, #804]	; (80007dc <display7SEG+0x35c>)
 80004b6:	f001 fbfe 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004c0:	48c6      	ldr	r0, [pc, #792]	; (80007dc <display7SEG+0x35c>)
 80004c2:	f001 fbf8 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004cc:	48c3      	ldr	r0, [pc, #780]	; (80007dc <display7SEG+0x35c>)
 80004ce:	f001 fbf2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d8:	48c0      	ldr	r0, [pc, #768]	; (80007dc <display7SEG+0x35c>)
 80004da:	f001 fbec 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 1){
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d127      	bne.n	8000534 <display7SEG+0xb4>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2140      	movs	r1, #64	; 0x40
 80004e8:	48bc      	ldr	r0, [pc, #752]	; (80007dc <display7SEG+0x35c>)
 80004ea:	f001 fbe4 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	48ba      	ldr	r0, [pc, #744]	; (80007dc <display7SEG+0x35c>)
 80004f4:	f001 fbdf 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80004f8:	2200      	movs	r2, #0
 80004fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fe:	48b7      	ldr	r0, [pc, #732]	; (80007dc <display7SEG+0x35c>)
 8000500:	f001 fbd9 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050a:	48b4      	ldr	r0, [pc, #720]	; (80007dc <display7SEG+0x35c>)
 800050c:	f001 fbd3 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000516:	48b1      	ldr	r0, [pc, #708]	; (80007dc <display7SEG+0x35c>)
 8000518:	f001 fbcd 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000522:	48ae      	ldr	r0, [pc, #696]	; (80007dc <display7SEG+0x35c>)
 8000524:	f001 fbc7 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48ab      	ldr	r0, [pc, #684]	; (80007dc <display7SEG+0x35c>)
 8000530:	f001 fbc1 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 2){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b02      	cmp	r3, #2
 8000538:	d127      	bne.n	800058a <display7SEG+0x10a>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2140      	movs	r1, #64	; 0x40
 800053e:	48a7      	ldr	r0, [pc, #668]	; (80007dc <display7SEG+0x35c>)
 8000540:	f001 fbb9 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	48a4      	ldr	r0, [pc, #656]	; (80007dc <display7SEG+0x35c>)
 800054a:	f001 fbb4 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000554:	48a1      	ldr	r0, [pc, #644]	; (80007dc <display7SEG+0x35c>)
 8000556:	f001 fbae 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000560:	489e      	ldr	r0, [pc, #632]	; (80007dc <display7SEG+0x35c>)
 8000562:	f001 fba8 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	489b      	ldr	r0, [pc, #620]	; (80007dc <display7SEG+0x35c>)
 800056e:	f001 fba2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000578:	4898      	ldr	r0, [pc, #608]	; (80007dc <display7SEG+0x35c>)
 800057a:	f001 fb9c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	4895      	ldr	r0, [pc, #596]	; (80007dc <display7SEG+0x35c>)
 8000586:	f001 fb96 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 3){
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b03      	cmp	r3, #3
 800058e:	d127      	bne.n	80005e0 <display7SEG+0x160>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	4891      	ldr	r0, [pc, #580]	; (80007dc <display7SEG+0x35c>)
 8000596:	f001 fb8e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	488f      	ldr	r0, [pc, #572]	; (80007dc <display7SEG+0x35c>)
 80005a0:	f001 fb89 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005aa:	488c      	ldr	r0, [pc, #560]	; (80007dc <display7SEG+0x35c>)
 80005ac:	f001 fb83 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005b6:	4889      	ldr	r0, [pc, #548]	; (80007dc <display7SEG+0x35c>)
 80005b8:	f001 fb7d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	4886      	ldr	r0, [pc, #536]	; (80007dc <display7SEG+0x35c>)
 80005c4:	f001 fb77 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ce:	4883      	ldr	r0, [pc, #524]	; (80007dc <display7SEG+0x35c>)
 80005d0:	f001 fb71 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005da:	4880      	ldr	r0, [pc, #512]	; (80007dc <display7SEG+0x35c>)
 80005dc:	f001 fb6b 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 4){
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d127      	bne.n	8000636 <display7SEG+0x1b6>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2140      	movs	r1, #64	; 0x40
 80005ea:	487c      	ldr	r0, [pc, #496]	; (80007dc <display7SEG+0x35c>)
 80005ec:	f001 fb63 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	4879      	ldr	r0, [pc, #484]	; (80007dc <display7SEG+0x35c>)
 80005f6:	f001 fb5e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	4876      	ldr	r0, [pc, #472]	; (80007dc <display7SEG+0x35c>)
 8000602:	f001 fb58 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 8000606:	2201      	movs	r2, #1
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	4873      	ldr	r0, [pc, #460]	; (80007dc <display7SEG+0x35c>)
 800060e:	f001 fb52 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000612:	2201      	movs	r2, #1
 8000614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000618:	4870      	ldr	r0, [pc, #448]	; (80007dc <display7SEG+0x35c>)
 800061a:	f001 fb4c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000624:	486d      	ldr	r0, [pc, #436]	; (80007dc <display7SEG+0x35c>)
 8000626:	f001 fb46 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000630:	486a      	ldr	r0, [pc, #424]	; (80007dc <display7SEG+0x35c>)
 8000632:	f001 fb40 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 5){
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b05      	cmp	r3, #5
 800063a:	d127      	bne.n	800068c <display7SEG+0x20c>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	2140      	movs	r1, #64	; 0x40
 8000640:	4866      	ldr	r0, [pc, #408]	; (80007dc <display7SEG+0x35c>)
 8000642:	f001 fb38 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 8000646:	2201      	movs	r2, #1
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	4864      	ldr	r0, [pc, #400]	; (80007dc <display7SEG+0x35c>)
 800064c:	f001 fb33 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000656:	4861      	ldr	r0, [pc, #388]	; (80007dc <display7SEG+0x35c>)
 8000658:	f001 fb2d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000662:	485e      	ldr	r0, [pc, #376]	; (80007dc <display7SEG+0x35c>)
 8000664:	f001 fb27 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800066e:	485b      	ldr	r0, [pc, #364]	; (80007dc <display7SEG+0x35c>)
 8000670:	f001 fb21 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067a:	4858      	ldr	r0, [pc, #352]	; (80007dc <display7SEG+0x35c>)
 800067c:	f001 fb1b 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000686:	4855      	ldr	r0, [pc, #340]	; (80007dc <display7SEG+0x35c>)
 8000688:	f001 fb15 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 6){
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b06      	cmp	r3, #6
 8000690:	d127      	bne.n	80006e2 <display7SEG+0x262>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4851      	ldr	r0, [pc, #324]	; (80007dc <display7SEG+0x35c>)
 8000698:	f001 fb0d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	484e      	ldr	r0, [pc, #312]	; (80007dc <display7SEG+0x35c>)
 80006a2:	f001 fb08 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80006a6:	2200      	movs	r2, #0
 80006a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ac:	484b      	ldr	r0, [pc, #300]	; (80007dc <display7SEG+0x35c>)
 80006ae:	f001 fb02 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b8:	4848      	ldr	r0, [pc, #288]	; (80007dc <display7SEG+0x35c>)
 80006ba:	f001 fafc 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	4845      	ldr	r0, [pc, #276]	; (80007dc <display7SEG+0x35c>)
 80006c6:	f001 faf6 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006d0:	4842      	ldr	r0, [pc, #264]	; (80007dc <display7SEG+0x35c>)
 80006d2:	f001 faf0 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006dc:	483f      	ldr	r0, [pc, #252]	; (80007dc <display7SEG+0x35c>)
 80006de:	f001 faea 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 7){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b07      	cmp	r3, #7
 80006e6:	d127      	bne.n	8000738 <display7SEG+0x2b8>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	483b      	ldr	r0, [pc, #236]	; (80007dc <display7SEG+0x35c>)
 80006ee:	f001 fae2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	4839      	ldr	r0, [pc, #228]	; (80007dc <display7SEG+0x35c>)
 80006f8:	f001 fadd 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000702:	4836      	ldr	r0, [pc, #216]	; (80007dc <display7SEG+0x35c>)
 8000704:	f001 fad7 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, SET);
 8000708:	2201      	movs	r2, #1
 800070a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070e:	4833      	ldr	r0, [pc, #204]	; (80007dc <display7SEG+0x35c>)
 8000710:	f001 fad1 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	4830      	ldr	r0, [pc, #192]	; (80007dc <display7SEG+0x35c>)
 800071c:	f001 facb 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000726:	482d      	ldr	r0, [pc, #180]	; (80007dc <display7SEG+0x35c>)
 8000728:	f001 fac5 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000732:	482a      	ldr	r0, [pc, #168]	; (80007dc <display7SEG+0x35c>)
 8000734:	f001 fabf 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 8){
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2b08      	cmp	r3, #8
 800073c:	d127      	bne.n	800078e <display7SEG+0x30e>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2140      	movs	r1, #64	; 0x40
 8000742:	4826      	ldr	r0, [pc, #152]	; (80007dc <display7SEG+0x35c>)
 8000744:	f001 fab7 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2180      	movs	r1, #128	; 0x80
 800074c:	4823      	ldr	r0, [pc, #140]	; (80007dc <display7SEG+0x35c>)
 800074e:	f001 fab2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000758:	4820      	ldr	r0, [pc, #128]	; (80007dc <display7SEG+0x35c>)
 800075a:	f001 faac 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000764:	481d      	ldr	r0, [pc, #116]	; (80007dc <display7SEG+0x35c>)
 8000766:	f001 faa6 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000770:	481a      	ldr	r0, [pc, #104]	; (80007dc <display7SEG+0x35c>)
 8000772:	f001 faa0 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 8000776:	2200      	movs	r2, #0
 8000778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <display7SEG+0x35c>)
 800077e:	f001 fa9a 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000788:	4814      	ldr	r0, [pc, #80]	; (80007dc <display7SEG+0x35c>)
 800078a:	f001 fa94 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 9){
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b09      	cmp	r3, #9
 8000792:	d12a      	bne.n	80007ea <display7SEG+0x36a>
		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4810      	ldr	r0, [pc, #64]	; (80007dc <display7SEG+0x35c>)
 800079a:	f001 fa8c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	480e      	ldr	r0, [pc, #56]	; (80007dc <display7SEG+0x35c>)
 80007a4:	f001 fa87 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <display7SEG+0x35c>)
 80007b0:	f001 fa81 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	4808      	ldr	r0, [pc, #32]	; (80007dc <display7SEG+0x35c>)
 80007bc:	f001 fa7b 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c6:	4805      	ldr	r0, [pc, #20]	; (80007dc <display7SEG+0x35c>)
 80007c8:	f001 fa75 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007d2:	4802      	ldr	r0, [pc, #8]	; (80007dc <display7SEG+0x35c>)
 80007d4:	f001 fa6f 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	e001      	b.n	80007e0 <display7SEG+0x360>
 80007dc:	40010800 	.word	0x40010800
 80007e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e4:	4803      	ldr	r0, [pc, #12]	; (80007f4 <display7SEG+0x374>)
 80007e6:	f001 fa66 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40010800 	.word	0x40010800

080007f8 <displayTIME>:

void displayTIME(int counter){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if(counter == 0){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d129      	bne.n	800085a <displayTIME+0x62>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	48d3      	ldr	r0, [pc, #844]	; (8000b5c <displayTIME+0x364>)
 800080e:	f001 fa52 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000818:	48d0      	ldr	r0, [pc, #832]	; (8000b5c <displayTIME+0x364>)
 800081a:	f001 fa4c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000824:	48cd      	ldr	r0, [pc, #820]	; (8000b5c <displayTIME+0x364>)
 8000826:	f001 fa46 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000830:	48ca      	ldr	r0, [pc, #808]	; (8000b5c <displayTIME+0x364>)
 8000832:	f001 fa40 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083c:	48c7      	ldr	r0, [pc, #796]	; (8000b5c <displayTIME+0x364>)
 800083e:	f001 fa3a 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000848:	48c4      	ldr	r0, [pc, #784]	; (8000b5c <displayTIME+0x364>)
 800084a:	f001 fa34 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 800084e:	2201      	movs	r2, #1
 8000850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000854:	48c1      	ldr	r0, [pc, #772]	; (8000b5c <displayTIME+0x364>)
 8000856:	f001 fa2e 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 1){
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d129      	bne.n	80008b4 <displayTIME+0xbc>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000866:	48bd      	ldr	r0, [pc, #756]	; (8000b5c <displayTIME+0x364>)
 8000868:	f001 fa25 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000872:	48ba      	ldr	r0, [pc, #744]	; (8000b5c <displayTIME+0x364>)
 8000874:	f001 fa1f 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800087e:	48b7      	ldr	r0, [pc, #732]	; (8000b5c <displayTIME+0x364>)
 8000880:	f001 fa19 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	48b4      	ldr	r0, [pc, #720]	; (8000b5c <displayTIME+0x364>)
 800088c:	f001 fa13 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000896:	48b1      	ldr	r0, [pc, #708]	; (8000b5c <displayTIME+0x364>)
 8000898:	f001 fa0d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 800089c:	2201      	movs	r2, #1
 800089e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a2:	48ae      	ldr	r0, [pc, #696]	; (8000b5c <displayTIME+0x364>)
 80008a4:	f001 fa07 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 80008a8:	2201      	movs	r2, #1
 80008aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008ae:	48ab      	ldr	r0, [pc, #684]	; (8000b5c <displayTIME+0x364>)
 80008b0:	f001 fa01 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 2){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d129      	bne.n	800090e <displayTIME+0x116>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c0:	48a6      	ldr	r0, [pc, #664]	; (8000b5c <displayTIME+0x364>)
 80008c2:	f001 f9f8 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008cc:	48a3      	ldr	r0, [pc, #652]	; (8000b5c <displayTIME+0x364>)
 80008ce:	f001 f9f2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008d8:	48a0      	ldr	r0, [pc, #640]	; (8000b5c <displayTIME+0x364>)
 80008da:	f001 f9ec 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e4:	489d      	ldr	r0, [pc, #628]	; (8000b5c <displayTIME+0x364>)
 80008e6:	f001 f9e6 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008f0:	489a      	ldr	r0, [pc, #616]	; (8000b5c <displayTIME+0x364>)
 80008f2:	f001 f9e0 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008fc:	4897      	ldr	r0, [pc, #604]	; (8000b5c <displayTIME+0x364>)
 80008fe:	f001 f9da 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000908:	4894      	ldr	r0, [pc, #592]	; (8000b5c <displayTIME+0x364>)
 800090a:	f001 f9d4 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 3){
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b03      	cmp	r3, #3
 8000912:	d129      	bne.n	8000968 <displayTIME+0x170>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 7100 	mov.w	r1, #512	; 0x200
 800091a:	4890      	ldr	r0, [pc, #576]	; (8000b5c <displayTIME+0x364>)
 800091c:	f001 f9cb 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000926:	488d      	ldr	r0, [pc, #564]	; (8000b5c <displayTIME+0x364>)
 8000928:	f001 f9c5 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000932:	488a      	ldr	r0, [pc, #552]	; (8000b5c <displayTIME+0x364>)
 8000934:	f001 f9bf 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093e:	4887      	ldr	r0, [pc, #540]	; (8000b5c <displayTIME+0x364>)
 8000940:	f001 f9b9 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094a:	4884      	ldr	r0, [pc, #528]	; (8000b5c <displayTIME+0x364>)
 800094c:	f001 f9b3 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 8000950:	2201      	movs	r2, #1
 8000952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000956:	4881      	ldr	r0, [pc, #516]	; (8000b5c <displayTIME+0x364>)
 8000958:	f001 f9ad 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000962:	487e      	ldr	r0, [pc, #504]	; (8000b5c <displayTIME+0x364>)
 8000964:	f001 f9a7 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 4){
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b04      	cmp	r3, #4
 800096c:	d129      	bne.n	80009c2 <displayTIME+0x1ca>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000974:	4879      	ldr	r0, [pc, #484]	; (8000b5c <displayTIME+0x364>)
 8000976:	f001 f99e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000980:	4876      	ldr	r0, [pc, #472]	; (8000b5c <displayTIME+0x364>)
 8000982:	f001 f998 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098c:	4873      	ldr	r0, [pc, #460]	; (8000b5c <displayTIME+0x364>)
 800098e:	f001 f992 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000992:	2201      	movs	r2, #1
 8000994:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000998:	4870      	ldr	r0, [pc, #448]	; (8000b5c <displayTIME+0x364>)
 800099a:	f001 f98c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	486d      	ldr	r0, [pc, #436]	; (8000b5c <displayTIME+0x364>)
 80009a6:	f001 f986 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b0:	486a      	ldr	r0, [pc, #424]	; (8000b5c <displayTIME+0x364>)
 80009b2:	f001 f980 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009bc:	4867      	ldr	r0, [pc, #412]	; (8000b5c <displayTIME+0x364>)
 80009be:	f001 f97a 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 5){
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d129      	bne.n	8000a1c <displayTIME+0x224>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ce:	4863      	ldr	r0, [pc, #396]	; (8000b5c <displayTIME+0x364>)
 80009d0:	f001 f971 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80009d4:	2201      	movs	r2, #1
 80009d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009da:	4860      	ldr	r0, [pc, #384]	; (8000b5c <displayTIME+0x364>)
 80009dc:	f001 f96b 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009e6:	485d      	ldr	r0, [pc, #372]	; (8000b5c <displayTIME+0x364>)
 80009e8:	f001 f965 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f2:	485a      	ldr	r0, [pc, #360]	; (8000b5c <displayTIME+0x364>)
 80009f4:	f001 f95f 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fe:	4857      	ldr	r0, [pc, #348]	; (8000b5c <displayTIME+0x364>)
 8000a00:	f001 f959 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0a:	4854      	ldr	r0, [pc, #336]	; (8000b5c <displayTIME+0x364>)
 8000a0c:	f001 f953 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a16:	4851      	ldr	r0, [pc, #324]	; (8000b5c <displayTIME+0x364>)
 8000a18:	f001 f94d 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 6){
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d129      	bne.n	8000a76 <displayTIME+0x27e>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a28:	484c      	ldr	r0, [pc, #304]	; (8000b5c <displayTIME+0x364>)
 8000a2a:	f001 f944 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a34:	4849      	ldr	r0, [pc, #292]	; (8000b5c <displayTIME+0x364>)
 8000a36:	f001 f93e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a40:	4846      	ldr	r0, [pc, #280]	; (8000b5c <displayTIME+0x364>)
 8000a42:	f001 f938 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4c:	4843      	ldr	r0, [pc, #268]	; (8000b5c <displayTIME+0x364>)
 8000a4e:	f001 f932 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a58:	4840      	ldr	r0, [pc, #256]	; (8000b5c <displayTIME+0x364>)
 8000a5a:	f001 f92c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a64:	483d      	ldr	r0, [pc, #244]	; (8000b5c <displayTIME+0x364>)
 8000a66:	f001 f926 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a70:	483a      	ldr	r0, [pc, #232]	; (8000b5c <displayTIME+0x364>)
 8000a72:	f001 f920 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 7){
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2b07      	cmp	r3, #7
 8000a7a:	d129      	bne.n	8000ad0 <displayTIME+0x2d8>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a82:	4836      	ldr	r0, [pc, #216]	; (8000b5c <displayTIME+0x364>)
 8000a84:	f001 f917 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8e:	4833      	ldr	r0, [pc, #204]	; (8000b5c <displayTIME+0x364>)
 8000a90:	f001 f911 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9a:	4830      	ldr	r0, [pc, #192]	; (8000b5c <displayTIME+0x364>)
 8000a9c:	f001 f90b 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa6:	482d      	ldr	r0, [pc, #180]	; (8000b5c <displayTIME+0x364>)
 8000aa8:	f001 f905 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ab2:	482a      	ldr	r0, [pc, #168]	; (8000b5c <displayTIME+0x364>)
 8000ab4:	f001 f8ff 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	4827      	ldr	r0, [pc, #156]	; (8000b5c <displayTIME+0x364>)
 8000ac0:	f001 f8f9 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aca:	4824      	ldr	r0, [pc, #144]	; (8000b5c <displayTIME+0x364>)
 8000acc:	f001 f8f3 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 8){
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b08      	cmp	r3, #8
 8000ad4:	d129      	bne.n	8000b2a <displayTIME+0x332>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <displayTIME+0x364>)
 8000ade:	f001 f8ea 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae8:	481c      	ldr	r0, [pc, #112]	; (8000b5c <displayTIME+0x364>)
 8000aea:	f001 f8e4 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af4:	4819      	ldr	r0, [pc, #100]	; (8000b5c <displayTIME+0x364>)
 8000af6:	f001 f8de 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b00:	4816      	ldr	r0, [pc, #88]	; (8000b5c <displayTIME+0x364>)
 8000b02:	f001 f8d8 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0c:	4813      	ldr	r0, [pc, #76]	; (8000b5c <displayTIME+0x364>)
 8000b0e:	f001 f8d2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b18:	4810      	ldr	r0, [pc, #64]	; (8000b5c <displayTIME+0x364>)
 8000b1a:	f001 f8cc 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <displayTIME+0x364>)
 8000b26:	f001 f8c6 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 9){
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b09      	cmp	r3, #9
 8000b2e:	d12c      	bne.n	8000b8a <displayTIME+0x392>
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b36:	4809      	ldr	r0, [pc, #36]	; (8000b5c <displayTIME+0x364>)
 8000b38:	f001 f8bd 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b42:	4806      	ldr	r0, [pc, #24]	; (8000b5c <displayTIME+0x364>)
 8000b44:	f001 f8b7 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <displayTIME+0x364>)
 8000b50:	f001 f8b1 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5a:	e001      	b.n	8000b60 <displayTIME+0x368>
 8000b5c:	40010c00 	.word	0x40010c00
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <displayTIME+0x39c>)
 8000b62:	f001 f8a8 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <displayTIME+0x39c>)
 8000b6e:	f001 f8a2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b78:	4806      	ldr	r0, [pc, #24]	; (8000b94 <displayTIME+0x39c>)
 8000b7a:	f001 f89c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <displayTIME+0x39c>)
 8000b86:	f001 f896 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010c00 	.word	0x40010c00

08000b98 <displayReplaceTIME>:

void displayReplaceTIME(int counter){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
	if(counter == 0){
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d124      	bne.n	8000bf0 <displayReplaceTIME+0x58>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bac:	48c6      	ldr	r0, [pc, #792]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000bae:	f001 f882 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2108      	movs	r1, #8
 8000bb6:	48c5      	ldr	r0, [pc, #788]	; (8000ecc <displayReplaceTIME+0x334>)
 8000bb8:	f001 f87d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2110      	movs	r1, #16
 8000bc0:	48c2      	ldr	r0, [pc, #776]	; (8000ecc <displayReplaceTIME+0x334>)
 8000bc2:	f001 f878 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2120      	movs	r1, #32
 8000bca:	48c0      	ldr	r0, [pc, #768]	; (8000ecc <displayReplaceTIME+0x334>)
 8000bcc:	f001 f873 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	48bd      	ldr	r0, [pc, #756]	; (8000ecc <displayReplaceTIME+0x334>)
 8000bd6:	f001 f86e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2180      	movs	r1, #128	; 0x80
 8000bde:	48bb      	ldr	r0, [pc, #748]	; (8000ecc <displayReplaceTIME+0x334>)
 8000be0:	f001 f869 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, SET);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bea:	48b8      	ldr	r0, [pc, #736]	; (8000ecc <displayReplaceTIME+0x334>)
 8000bec:	f001 f863 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 1){
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d124      	bne.n	8000c40 <displayReplaceTIME+0xa8>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, SET);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfc:	48b2      	ldr	r0, [pc, #712]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000bfe:	f001 f85a 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	48b1      	ldr	r0, [pc, #708]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c08:	f001 f855 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	48ae      	ldr	r0, [pc, #696]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c12:	f001 f850 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	48ac      	ldr	r0, [pc, #688]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c1c:	f001 f84b 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	48a9      	ldr	r0, [pc, #676]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c26:	f001 f846 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	48a7      	ldr	r0, [pc, #668]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c30:	f001 f841 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c3a:	48a4      	ldr	r0, [pc, #656]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c3c:	f001 f83b 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 2){
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d124      	bne.n	8000c90 <displayReplaceTIME+0xf8>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4c:	489e      	ldr	r0, [pc, #632]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000c4e:	f001 f832 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2108      	movs	r1, #8
 8000c56:	489d      	ldr	r0, [pc, #628]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c58:	f001 f82d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2110      	movs	r1, #16
 8000c60:	489a      	ldr	r0, [pc, #616]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c62:	f001 f828 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2120      	movs	r1, #32
 8000c6a:	4898      	ldr	r0, [pc, #608]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c6c:	f001 f823 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2140      	movs	r1, #64	; 0x40
 8000c74:	4895      	ldr	r0, [pc, #596]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c76:	f001 f81e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, SET);
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	4893      	ldr	r0, [pc, #588]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c80:	f001 f819 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8a:	4890      	ldr	r0, [pc, #576]	; (8000ecc <displayReplaceTIME+0x334>)
 8000c8c:	f001 f813 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 3){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d124      	bne.n	8000ce0 <displayReplaceTIME+0x148>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9c:	488a      	ldr	r0, [pc, #552]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000c9e:	f001 f80a 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2108      	movs	r1, #8
 8000ca6:	4889      	ldr	r0, [pc, #548]	; (8000ecc <displayReplaceTIME+0x334>)
 8000ca8:	f001 f805 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4886      	ldr	r0, [pc, #536]	; (8000ecc <displayReplaceTIME+0x334>)
 8000cb2:	f001 f800 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4884      	ldr	r0, [pc, #528]	; (8000ecc <displayReplaceTIME+0x334>)
 8000cbc:	f000 fffb 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, SET);
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	4881      	ldr	r0, [pc, #516]	; (8000ecc <displayReplaceTIME+0x334>)
 8000cc6:	f000 fff6 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, SET);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2180      	movs	r1, #128	; 0x80
 8000cce:	487f      	ldr	r0, [pc, #508]	; (8000ecc <displayReplaceTIME+0x334>)
 8000cd0:	f000 fff1 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cda:	487c      	ldr	r0, [pc, #496]	; (8000ecc <displayReplaceTIME+0x334>)
 8000cdc:	f000 ffeb 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 4){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b04      	cmp	r3, #4
 8000ce4:	d124      	bne.n	8000d30 <displayReplaceTIME+0x198>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cec:	4876      	ldr	r0, [pc, #472]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000cee:	f000 ffe2 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2108      	movs	r1, #8
 8000cf6:	4875      	ldr	r0, [pc, #468]	; (8000ecc <displayReplaceTIME+0x334>)
 8000cf8:	f000 ffdd 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2110      	movs	r1, #16
 8000d00:	4872      	ldr	r0, [pc, #456]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d02:	f000 ffd8 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2120      	movs	r1, #32
 8000d0a:	4870      	ldr	r0, [pc, #448]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d0c:	f000 ffd3 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	486d      	ldr	r0, [pc, #436]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d16:	f000 ffce 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2180      	movs	r1, #128	; 0x80
 8000d1e:	486b      	ldr	r0, [pc, #428]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d20:	f000 ffc9 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d2a:	4868      	ldr	r0, [pc, #416]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d2c:	f000 ffc3 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 5){
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b05      	cmp	r3, #5
 8000d34:	d124      	bne.n	8000d80 <displayReplaceTIME+0x1e8>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3c:	4862      	ldr	r0, [pc, #392]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000d3e:	f000 ffba 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	2108      	movs	r1, #8
 8000d46:	4861      	ldr	r0, [pc, #388]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d48:	f000 ffb5 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2110      	movs	r1, #16
 8000d50:	485e      	ldr	r0, [pc, #376]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d52:	f000 ffb0 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, RESET);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2120      	movs	r1, #32
 8000d5a:	485c      	ldr	r0, [pc, #368]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d5c:	f000 ffab 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2140      	movs	r1, #64	; 0x40
 8000d64:	4859      	ldr	r0, [pc, #356]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d66:	f000 ffa6 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	4857      	ldr	r0, [pc, #348]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d70:	f000 ffa1 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7a:	4854      	ldr	r0, [pc, #336]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d7c:	f000 ff9b 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 6){
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d124      	bne.n	8000dd0 <displayReplaceTIME+0x238>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d8c:	484e      	ldr	r0, [pc, #312]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000d8e:	f000 ff92 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2108      	movs	r1, #8
 8000d96:	484d      	ldr	r0, [pc, #308]	; (8000ecc <displayReplaceTIME+0x334>)
 8000d98:	f000 ff8d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2110      	movs	r1, #16
 8000da0:	484a      	ldr	r0, [pc, #296]	; (8000ecc <displayReplaceTIME+0x334>)
 8000da2:	f000 ff88 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	4848      	ldr	r0, [pc, #288]	; (8000ecc <displayReplaceTIME+0x334>)
 8000dac:	f000 ff83 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2140      	movs	r1, #64	; 0x40
 8000db4:	4845      	ldr	r0, [pc, #276]	; (8000ecc <displayReplaceTIME+0x334>)
 8000db6:	f000 ff7e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	4843      	ldr	r0, [pc, #268]	; (8000ecc <displayReplaceTIME+0x334>)
 8000dc0:	f000 ff79 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dca:	4840      	ldr	r0, [pc, #256]	; (8000ecc <displayReplaceTIME+0x334>)
 8000dcc:	f000 ff73 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 7){
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d124      	bne.n	8000e20 <displayReplaceTIME+0x288>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	483a      	ldr	r0, [pc, #232]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000dde:	f000 ff6a 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2108      	movs	r1, #8
 8000de6:	4839      	ldr	r0, [pc, #228]	; (8000ecc <displayReplaceTIME+0x334>)
 8000de8:	f000 ff65 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2110      	movs	r1, #16
 8000df0:	4836      	ldr	r0, [pc, #216]	; (8000ecc <displayReplaceTIME+0x334>)
 8000df2:	f000 ff60 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2120      	movs	r1, #32
 8000dfa:	4834      	ldr	r0, [pc, #208]	; (8000ecc <displayReplaceTIME+0x334>)
 8000dfc:	f000 ff5b 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	2140      	movs	r1, #64	; 0x40
 8000e04:	4831      	ldr	r0, [pc, #196]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e06:	f000 ff56 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, SET);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	2180      	movs	r1, #128	; 0x80
 8000e0e:	482f      	ldr	r0, [pc, #188]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e10:	f000 ff51 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, SET);
 8000e14:	2201      	movs	r2, #1
 8000e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1a:	482c      	ldr	r0, [pc, #176]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e1c:	f000 ff4b 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 8){
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2b08      	cmp	r3, #8
 8000e24:	d124      	bne.n	8000e70 <displayReplaceTIME+0x2d8>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e2c:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000e2e:	f000 ff42 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2108      	movs	r1, #8
 8000e36:	4825      	ldr	r0, [pc, #148]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e38:	f000 ff3d 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2110      	movs	r1, #16
 8000e40:	4822      	ldr	r0, [pc, #136]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e42:	f000 ff38 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2120      	movs	r1, #32
 8000e4a:	4820      	ldr	r0, [pc, #128]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e4c:	f000 ff33 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2140      	movs	r1, #64	; 0x40
 8000e54:	481d      	ldr	r0, [pc, #116]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e56:	f000 ff2e 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, RESET);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	481b      	ldr	r0, [pc, #108]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e60:	f000 ff29 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6a:	4818      	ldr	r0, [pc, #96]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e6c:	f000 ff23 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
	if(counter == 9){
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b09      	cmp	r3, #9
 8000e74:	d124      	bne.n	8000ec0 <displayReplaceTIME+0x328>
		HAL_GPIO_WritePin(AA_GPIO_Port, AA_Pin, RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <displayReplaceTIME+0x330>)
 8000e7e:	f000 ff1a 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BB_GPIO_Port, BB_Pin, RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2108      	movs	r1, #8
 8000e86:	4811      	ldr	r0, [pc, #68]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e88:	f000 ff15 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CC_GPIO_Port, CC_Pin, RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2110      	movs	r1, #16
 8000e90:	480e      	ldr	r0, [pc, #56]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e92:	f000 ff10 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DD_GPIO_Port, DD_Pin, RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2120      	movs	r1, #32
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <displayReplaceTIME+0x334>)
 8000e9c:	f000 ff0b 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EE_GPIO_Port, EE_Pin, SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2140      	movs	r1, #64	; 0x40
 8000ea4:	4809      	ldr	r0, [pc, #36]	; (8000ecc <displayReplaceTIME+0x334>)
 8000ea6:	f000 ff06 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FF_GPIO_Port, FF_Pin, RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	4807      	ldr	r0, [pc, #28]	; (8000ecc <displayReplaceTIME+0x334>)
 8000eb0:	f000 ff01 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GG_GPIO_Port, GG_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	4804      	ldr	r0, [pc, #16]	; (8000ecc <displayReplaceTIME+0x334>)
 8000ebc:	f000 fefb 	bl	8001cb6 <HAL_GPIO_WritePin>
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	40010c00 	.word	0x40010c00

08000ed0 <fsm_automatic_run>:
 */

#include "fsm_automatic.h"
#include "main.h"
#include "global.h"
void fsm_automatic_run(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  switch( status ){
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <fsm_automatic_run+0xf0>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3b01      	subs	r3, #1
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d867      	bhi.n	8000fae <fsm_automatic_run+0xde>
 8000ede:	a201      	add	r2, pc, #4	; (adr r2, 8000ee4 <fsm_automatic_run+0x14>)
 8000ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee4:	08000ef5 	.word	0x08000ef5
 8000ee8:	08000f07 	.word	0x08000f07
 8000eec:	08000f3f 	.word	0x08000f3f
 8000ef0:	08000f77 	.word	0x08000f77
  case INIT:
	  status = AUTO_RED;
 8000ef4:	4b32      	ldr	r3, [pc, #200]	; (8000fc0 <fsm_automatic_run+0xf0>)
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	601a      	str	r2, [r3, #0]
	  setTimer1(timeRED);
 8000efa:	4b32      	ldr	r3, [pc, #200]	; (8000fc4 <fsm_automatic_run+0xf4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fa22 	bl	8001348 <setTimer1>
	  break;
 8000f04:	e05a      	b.n	8000fbc <fsm_automatic_run+0xec>
  case AUTO_RED:
	  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	482f      	ldr	r0, [pc, #188]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f0c:	f000 fed3 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2104      	movs	r1, #4
 8000f14:	482c      	ldr	r0, [pc, #176]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f16:	f000 fece 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2102      	movs	r1, #2
 8000f1e:	482a      	ldr	r0, [pc, #168]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f20:	f000 fec9 	bl	8001cb6 <HAL_GPIO_WritePin>
	  if(timer1_flag == 1){
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <fsm_automatic_run+0xfc>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d142      	bne.n	8000fb2 <fsm_automatic_run+0xe2>
		  status = AUTO_GREEN;
 8000f2c:	4b24      	ldr	r3, [pc, #144]	; (8000fc0 <fsm_automatic_run+0xf0>)
 8000f2e:	2203      	movs	r2, #3
 8000f30:	601a      	str	r2, [r3, #0]
		  setTimer1(timeGREEN);
 8000f32:	4b27      	ldr	r3, [pc, #156]	; (8000fd0 <fsm_automatic_run+0x100>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 fa06 	bl	8001348 <setTimer1>
	  }
	  break;
 8000f3c:	e039      	b.n	8000fb2 <fsm_automatic_run+0xe2>
  case AUTO_GREEN:
	  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2101      	movs	r1, #1
 8000f42:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f44:	f000 feb7 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f4e:	f000 feb2 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2102      	movs	r1, #2
 8000f56:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f58:	f000 fead 	bl	8001cb6 <HAL_GPIO_WritePin>
	  if(timer1_flag == 1){
 8000f5c:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <fsm_automatic_run+0xfc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d128      	bne.n	8000fb6 <fsm_automatic_run+0xe6>
		  status = AUTO_YELLOW;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <fsm_automatic_run+0xf0>)
 8000f66:	2204      	movs	r2, #4
 8000f68:	601a      	str	r2, [r3, #0]
		  setTimer1(timeYELLOW);
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <fsm_automatic_run+0x104>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f9ea 	bl	8001348 <setTimer1>
	  }
	  break;
 8000f74:	e01f      	b.n	8000fb6 <fsm_automatic_run+0xe6>
  case AUTO_YELLOW:
	  HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f7c:	f000 fe9b 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	2104      	movs	r1, #4
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f86:	f000 fe96 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <fsm_automatic_run+0xf8>)
 8000f90:	f000 fe91 	bl	8001cb6 <HAL_GPIO_WritePin>
	  if(timer1_flag == 1){
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <fsm_automatic_run+0xfc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d10e      	bne.n	8000fba <fsm_automatic_run+0xea>
		  status = AUTO_RED;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <fsm_automatic_run+0xf0>)
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	601a      	str	r2, [r3, #0]
		  setTimer1(timeRED);
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <fsm_automatic_run+0xf4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f9ce 	bl	8001348 <setTimer1>
	  }
	  break;
 8000fac:	e005      	b.n	8000fba <fsm_automatic_run+0xea>
  default:
	  break;
 8000fae:	bf00      	nop
 8000fb0:	e004      	b.n	8000fbc <fsm_automatic_run+0xec>
	  break;
 8000fb2:	bf00      	nop
 8000fb4:	e002      	b.n	8000fbc <fsm_automatic_run+0xec>
	  break;
 8000fb6:	bf00      	nop
 8000fb8:	e000      	b.n	8000fbc <fsm_automatic_run+0xec>
	  break;
 8000fba:	bf00      	nop
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000078 	.word	0x20000078
 8000fc4:	2000003c 	.word	0x2000003c
 8000fc8:	40010800 	.word	0x40010800
 8000fcc:	20000088 	.word	0x20000088
 8000fd0:	20000040 	.word	0x20000040
 8000fd4:	20000044 	.word	0x20000044

08000fd8 <fsm_automatic_run2>:

void fsm_automatic_run2(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  switch( status2 ){
 8000fdc:	4b3a      	ldr	r3, [pc, #232]	; (80010c8 <fsm_automatic_run2+0xf0>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d867      	bhi.n	80010b6 <fsm_automatic_run2+0xde>
 8000fe6:	a201      	add	r2, pc, #4	; (adr r2, 8000fec <fsm_automatic_run2+0x14>)
 8000fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fec:	08000ffd 	.word	0x08000ffd
 8000ff0:	0800100f 	.word	0x0800100f
 8000ff4:	08001047 	.word	0x08001047
 8000ff8:	0800107f 	.word	0x0800107f
  case INIT:
	  status2 = AUTO_GREEN;
 8000ffc:	4b32      	ldr	r3, [pc, #200]	; (80010c8 <fsm_automatic_run2+0xf0>)
 8000ffe:	2203      	movs	r2, #3
 8001000:	601a      	str	r2, [r3, #0]
	  setTimer2(timeGREEN);
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <fsm_automatic_run2+0xf4>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f9d8 	bl	80013bc <setTimer2>
	  break;
 800100c:	e05a      	b.n	80010c4 <fsm_automatic_run2+0xec>
  case AUTO_RED:
	  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2108      	movs	r1, #8
 8001012:	482f      	ldr	r0, [pc, #188]	; (80010d0 <fsm_automatic_run2+0xf8>)
 8001014:	f000 fe4f 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001018:	2201      	movs	r2, #1
 800101a:	2120      	movs	r1, #32
 800101c:	482c      	ldr	r0, [pc, #176]	; (80010d0 <fsm_automatic_run2+0xf8>)
 800101e:	f000 fe4a 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2110      	movs	r1, #16
 8001026:	482a      	ldr	r0, [pc, #168]	; (80010d0 <fsm_automatic_run2+0xf8>)
 8001028:	f000 fe45 	bl	8001cb6 <HAL_GPIO_WritePin>
	  if(timer2_flag == 1){
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <fsm_automatic_run2+0xfc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d142      	bne.n	80010ba <fsm_automatic_run2+0xe2>
		  status2 = AUTO_GREEN;
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <fsm_automatic_run2+0xf0>)
 8001036:	2203      	movs	r2, #3
 8001038:	601a      	str	r2, [r3, #0]
		  setTimer2(timeGREEN);
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <fsm_automatic_run2+0xf4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f9bc 	bl	80013bc <setTimer2>
	  }
	  break;
 8001044:	e039      	b.n	80010ba <fsm_automatic_run2+0xe2>
  case AUTO_GREEN:
	  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2108      	movs	r1, #8
 800104a:	4821      	ldr	r0, [pc, #132]	; (80010d0 <fsm_automatic_run2+0xf8>)
 800104c:	f000 fe33 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2120      	movs	r1, #32
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <fsm_automatic_run2+0xf8>)
 8001056:	f000 fe2e 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2110      	movs	r1, #16
 800105e:	481c      	ldr	r0, [pc, #112]	; (80010d0 <fsm_automatic_run2+0xf8>)
 8001060:	f000 fe29 	bl	8001cb6 <HAL_GPIO_WritePin>
	  if(timer2_flag == 1){
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <fsm_automatic_run2+0xfc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d128      	bne.n	80010be <fsm_automatic_run2+0xe6>
		  status2 = AUTO_YELLOW;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <fsm_automatic_run2+0xf0>)
 800106e:	2204      	movs	r2, #4
 8001070:	601a      	str	r2, [r3, #0]
		  setTimer2(timeYELLOW);
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <fsm_automatic_run2+0x100>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f9a0 	bl	80013bc <setTimer2>
	  }
	  break;
 800107c:	e01f      	b.n	80010be <fsm_automatic_run2+0xe6>
  case AUTO_YELLOW:
	  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800107e:	2201      	movs	r2, #1
 8001080:	2108      	movs	r1, #8
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <fsm_automatic_run2+0xf8>)
 8001084:	f000 fe17 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8001088:	2201      	movs	r2, #1
 800108a:	2120      	movs	r1, #32
 800108c:	4810      	ldr	r0, [pc, #64]	; (80010d0 <fsm_automatic_run2+0xf8>)
 800108e:	f000 fe12 	bl	8001cb6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2110      	movs	r1, #16
 8001096:	480e      	ldr	r0, [pc, #56]	; (80010d0 <fsm_automatic_run2+0xf8>)
 8001098:	f000 fe0d 	bl	8001cb6 <HAL_GPIO_WritePin>
	  if(timer2_flag == 1){
 800109c:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <fsm_automatic_run2+0xfc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10e      	bne.n	80010c2 <fsm_automatic_run2+0xea>
		  status2 = AUTO_RED;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <fsm_automatic_run2+0xf0>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	601a      	str	r2, [r3, #0]
		  setTimer2(timeRED);
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <fsm_automatic_run2+0x104>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f984 	bl	80013bc <setTimer2>
	  }
	  break;
 80010b4:	e005      	b.n	80010c2 <fsm_automatic_run2+0xea>
  default:
	  break;
 80010b6:	bf00      	nop
 80010b8:	e004      	b.n	80010c4 <fsm_automatic_run2+0xec>
	  break;
 80010ba:	bf00      	nop
 80010bc:	e002      	b.n	80010c4 <fsm_automatic_run2+0xec>
	  break;
 80010be:	bf00      	nop
 80010c0:	e000      	b.n	80010c4 <fsm_automatic_run2+0xec>
	  break;
 80010c2:	bf00      	nop
  }
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000007c 	.word	0x2000007c
 80010cc:	20000040 	.word	0x20000040
 80010d0:	40010800 	.word	0x40010800
 80010d4:	20000090 	.word	0x20000090
 80010d8:	20000044 	.word	0x20000044
 80010dc:	2000003c 	.word	0x2000003c

080010e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e4:	f000 fae6 	bl	80016b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e8:	f000 f81e 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ec:	f000 f8a4 	bl	8001238 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010f0:	f000 f856 	bl	80011a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010f4:	4808      	ldr	r0, [pc, #32]	; (8001118 <main+0x38>)
 80010f6:	f001 fa47 	bl	8002588 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <main+0x3c>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <main+0x40>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  if(Mode == 1){
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <main+0x44>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d1fb      	bne.n	8001106 <main+0x26>
		  fsm_automatic_run();
 800110e:	f7ff fedf 	bl	8000ed0 <fsm_automatic_run>
		  fsm_automatic_run2();
 8001112:	f7ff ff61 	bl	8000fd8 <fsm_automatic_run2>
	  if(Mode == 1){
 8001116:	e7f6      	b.n	8001106 <main+0x26>
 8001118:	20000094 	.word	0x20000094
 800111c:	20000078 	.word	0x20000078
 8001120:	2000007c 	.word	0x2000007c
 8001124:	20000048 	.word	0x20000048

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b090      	sub	sp, #64	; 0x40
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	2228      	movs	r2, #40	; 0x28
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fdde 	bl	8002cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114e:	2301      	movs	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2310      	movs	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115a:	f107 0318 	add.w	r3, r7, #24
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fdda 	bl	8001d18 <HAL_RCC_OscConfig>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800116a:	f000 f8e7 	bl	800133c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116e:	230f      	movs	r3, #15
 8001170:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f001 f846 	bl	8002218 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001192:	f000 f8d3 	bl	800133c <Error_Handler>
  }
}
 8001196:	bf00      	nop
 8001198:	3740      	adds	r7, #64	; 0x40
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_TIM2_Init+0x94>)
 80011be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_TIM2_Init+0x94>)
 80011c6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80011ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_TIM2_Init+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_TIM2_Init+0x94>)
 80011d4:	2209      	movs	r2, #9
 80011d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_TIM2_Init+0x94>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_TIM2_Init+0x94>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011e4:	4813      	ldr	r0, [pc, #76]	; (8001234 <MX_TIM2_Init+0x94>)
 80011e6:	f001 f97f 	bl	80024e8 <HAL_TIM_Base_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f0:	f000 f8a4 	bl	800133c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_TIM2_Init+0x94>)
 8001202:	f001 fb15 	bl	8002830 <HAL_TIM_ConfigClockSource>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800120c:	f000 f896 	bl	800133c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001210:	2300      	movs	r3, #0
 8001212:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_TIM2_Init+0x94>)
 800121e:	f001 fcdd 	bl	8002bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001228:	f000 f888 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000094 	.word	0x20000094

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <MX_GPIO_Init+0xb8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a27      	ldr	r2, [pc, #156]	; (80012f0 <MX_GPIO_Init+0xb8>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <MX_GPIO_Init+0xb8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <MX_GPIO_Init+0xb8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <MX_GPIO_Init+0xb8>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_GPIO_Init+0xb8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0308 	and.w	r3, r3, #8
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800127c:	2200      	movs	r2, #0
 800127e:	f649 71ff 	movw	r1, #40959	; 0x9fff
 8001282:	481c      	ldr	r0, [pc, #112]	; (80012f4 <MX_GPIO_Init+0xbc>)
 8001284:	f000 fd17 	bl	8001cb6 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|LED_A_Pin|LED_B_Pin
                          |LED_C_Pin|LED_D_Pin|LED_E_Pin|LED_F_Pin
                          |LED_G_Pin|AA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B_Pin|C_Pin|D_Pin|E_Pin
 8001288:	2200      	movs	r2, #0
 800128a:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 800128e:	481a      	ldr	r0, [pc, #104]	; (80012f8 <MX_GPIO_Init+0xc0>)
 8001290:	f000 fd11 	bl	8001cb6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin LED_A_Pin LED_B_Pin
                           LED_C_Pin LED_D_Pin LED_E_Pin LED_F_Pin
                           LED_G_Pin AA_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8001294:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8001298:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|LED_A_Pin|LED_B_Pin
                          |LED_C_Pin|LED_D_Pin|LED_E_Pin|LED_F_Pin
                          |LED_G_Pin|AA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129a:	2301      	movs	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2302      	movs	r3, #2
 80012a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4619      	mov	r1, r3
 80012ac:	4811      	ldr	r0, [pc, #68]	; (80012f4 <MX_GPIO_Init+0xbc>)
 80012ae:	f000 fb71 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80012b2:	2307      	movs	r3, #7
 80012b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <MX_GPIO_Init+0xc0>)
 80012c6:	f000 fb65 	bl	8001994 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pin C_Pin D_Pin E_Pin
                           F_Pin G_Pin BB_Pin CC_Pin
                           DD_Pin EE_Pin FF_Pin GG_Pin
                           A_Pin */
  GPIO_InitStruct.Pin = B_Pin|C_Pin|D_Pin|E_Pin
 80012ca:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80012ce:	60bb      	str	r3, [r7, #8]
                          |F_Pin|G_Pin|BB_Pin|CC_Pin
                          |DD_Pin|EE_Pin|FF_Pin|GG_Pin
                          |A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	4619      	mov	r1, r3
 80012e2:	4805      	ldr	r0, [pc, #20]	; (80012f8 <MX_GPIO_Init+0xc0>)
 80012e4:	f000 fb56 	bl	8001994 <HAL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00

080012fc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_TogglePin ( RED1_GPIO_Port , RED1_Pin );
	getKeyInput();
 8001304:	f7fe ff86 	bl	8000214 <getKeyInput>
	getKeyInput2();
 8001308:	f7fe ffea 	bl	80002e0 <getKeyInput2>
	getKeyInput3();
 800130c:	f7ff f86a 	bl	80003e4 <getKeyInput3>
	display7SEG(Mode);
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8b3 	bl	8000480 <display7SEG>
	if(Mode == 1){
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d104      	bne.n	800132c <HAL_TIM_PeriodElapsedCallback+0x30>
		timer_run();
 8001322:	f000 f825 	bl	8001370 <timer_run>
		timer_run2 ();
 8001326:	f000 f85d 	bl	80013e4 <timer_run2>
	}
	else{
		toggleLED();
	}

}
 800132a:	e001      	b.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x34>
		toggleLED();
 800132c:	f000 f902 	bl	8001534 <toggleLED>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000048 	.word	0x20000048

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <setTimer1>:
#include "display7SEG.h"
int timer1_counter = 0;
int timer1_flag = 0;
int TIMER_CYCLE = 10;

void setTimer1 ( int duration ) {
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 timer1_counter = duration ;
 8001350:	4a05      	ldr	r2, [pc, #20]	; (8001368 <setTimer1+0x20>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6013      	str	r3, [r2, #0]
 timer1_flag = 0;
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <setTimer1+0x24>)
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 }
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	20000084 	.word	0x20000084
 800136c:	20000088 	.word	0x20000088

08001370 <timer_run>:


 void timer_run () {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
 if( timer1_counter > 0) {
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <timer_run+0x40>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	dd0f      	ble.n	800139c <timer_run+0x2c>
 timer1_counter --;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <timer_run+0x40>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3b01      	subs	r3, #1
 8001382:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <timer_run+0x40>)
 8001384:	6013      	str	r3, [r2, #0]
 displayTIME(timer1_counter/100);
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <timer_run+0x40>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <timer_run+0x44>)
 800138c:	fb82 1203 	smull	r1, r2, r2, r3
 8001390:	1152      	asrs	r2, r2, #5
 8001392:	17db      	asrs	r3, r3, #31
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fa2e 	bl	80007f8 <displayTIME>
 }
 if( timer1_counter == 0) timer1_flag = 1;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <timer_run+0x40>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <timer_run+0x3a>
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <timer_run+0x48>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000084 	.word	0x20000084
 80013b4:	51eb851f 	.word	0x51eb851f
 80013b8:	20000088 	.word	0x20000088

080013bc <setTimer2>:


 int timer2_counter = 0;
 int timer2_flag = 0;

 void setTimer2 ( int duration ) {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  timer2_counter = duration ;
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <setTimer2+0x20>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6013      	str	r3, [r2, #0]
  timer2_flag = 0;
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <setTimer2+0x24>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  }
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	2000008c 	.word	0x2000008c
 80013e0:	20000090 	.word	0x20000090

080013e4 <timer_run2>:

  void timer_run2 () {
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  if( timer2_counter > 0) {
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <timer_run2+0x2c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	dd04      	ble.n	80013fa <timer_run2+0x16>
  timer2_counter --;
 80013f0:	4b07      	ldr	r3, [pc, #28]	; (8001410 <timer_run2+0x2c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3b01      	subs	r3, #1
 80013f6:	4a06      	ldr	r2, [pc, #24]	; (8001410 <timer_run2+0x2c>)
 80013f8:	6013      	str	r3, [r2, #0]
  }
  if( timer2_counter == 0) timer2_flag = 1;
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <timer_run2+0x2c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d102      	bne.n	8001408 <timer_run2+0x24>
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <timer_run2+0x30>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
 }
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	2000008c 	.word	0x2000008c
 8001414:	20000090 	.word	0x20000090

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_MspInit+0x5c>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	4a14      	ldr	r2, [pc, #80]	; (8001474 <HAL_MspInit+0x5c>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6193      	str	r3, [r2, #24]
 800142a:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_MspInit+0x5c>)
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x5c>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x5c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	61d3      	str	r3, [r2, #28]
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x5c>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_MspInit+0x60>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	4a04      	ldr	r2, [pc, #16]	; (8001478 <HAL_MspInit+0x60>)
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000

0800147c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148c:	d113      	bne.n	80014b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_TIM_Base_MspInit+0x44>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <HAL_TIM_Base_MspInit+0x44>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	61d3      	str	r3, [r2, #28]
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_TIM_Base_MspInit+0x44>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	201c      	movs	r0, #28
 80014ac:	f000 fa3b 	bl	8001926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014b0:	201c      	movs	r0, #28
 80014b2:	f000 fa54 	bl	800195e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <NMI_Handler+0x4>

080014ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ce:	e7fe      	b.n	80014ce <HardFault_Handler+0x4>

080014d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MemManage_Handler+0x4>

080014d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <BusFault_Handler+0x4>

080014dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <UsageFault_Handler+0x4>

080014e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr

080014fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150a:	f000 f919 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001518:	4802      	ldr	r0, [pc, #8]	; (8001524 <TIM2_IRQHandler+0x10>)
 800151a:	f001 f881 	bl	8002620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000094 	.word	0x20000094

08001528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	bc80      	pop	{r7}
 8001532:	4770      	bx	lr

08001534 <toggleLED>:
 */
#include "toggleLED.h"
#include "main.h"
#include "global.h"
int counter1 = 50;
void toggleLED(){
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	if(Mode == 2 ){
 8001538:	4b48      	ldr	r3, [pc, #288]	; (800165c <toggleLED+0x128>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d12b      	bne.n	8001598 <toggleLED+0x64>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8001540:	2201      	movs	r2, #1
 8001542:	2102      	movs	r1, #2
 8001544:	4846      	ldr	r0, [pc, #280]	; (8001660 <toggleLED+0x12c>)
 8001546:	f000 fbb6 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800154a:	2201      	movs	r2, #1
 800154c:	2104      	movs	r1, #4
 800154e:	4844      	ldr	r0, [pc, #272]	; (8001660 <toggleLED+0x12c>)
 8001550:	f000 fbb1 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2110      	movs	r1, #16
 8001558:	4841      	ldr	r0, [pc, #260]	; (8001660 <toggleLED+0x12c>)
 800155a:	f000 fbac 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2120      	movs	r1, #32
 8001562:	483f      	ldr	r0, [pc, #252]	; (8001660 <toggleLED+0x12c>)
 8001564:	f000 fba7 	bl	8001cb6 <HAL_GPIO_WritePin>
		if(counter1 > 0){
 8001568:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <toggleLED+0x130>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	dd04      	ble.n	800157a <toggleLED+0x46>
			counter1--;
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <toggleLED+0x130>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3b01      	subs	r3, #1
 8001576:	4a3b      	ldr	r2, [pc, #236]	; (8001664 <toggleLED+0x130>)
 8001578:	6013      	str	r3, [r2, #0]
		}
		if(counter1 <= 0){
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <toggleLED+0x130>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	dc0a      	bgt.n	8001598 <toggleLED+0x64>
			counter1 = 50;
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <toggleLED+0x130>)
 8001584:	2232      	movs	r2, #50	; 0x32
 8001586:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin ( RED1_GPIO_Port , RED1_Pin );
 8001588:	2101      	movs	r1, #1
 800158a:	4835      	ldr	r0, [pc, #212]	; (8001660 <toggleLED+0x12c>)
 800158c:	f000 fbab 	bl	8001ce6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin ( RED2_GPIO_Port , RED2_Pin );
 8001590:	2108      	movs	r1, #8
 8001592:	4833      	ldr	r0, [pc, #204]	; (8001660 <toggleLED+0x12c>)
 8001594:	f000 fba7 	bl	8001ce6 <HAL_GPIO_TogglePin>
		}
	}
	if(Mode == 3 ){
 8001598:	4b30      	ldr	r3, [pc, #192]	; (800165c <toggleLED+0x128>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d12b      	bne.n	80015f8 <toggleLED+0xc4>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	2101      	movs	r1, #1
 80015a4:	482e      	ldr	r0, [pc, #184]	; (8001660 <toggleLED+0x12c>)
 80015a6:	f000 fb86 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2104      	movs	r1, #4
 80015ae:	482c      	ldr	r0, [pc, #176]	; (8001660 <toggleLED+0x12c>)
 80015b0:	f000 fb81 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2108      	movs	r1, #8
 80015b8:	4829      	ldr	r0, [pc, #164]	; (8001660 <toggleLED+0x12c>)
 80015ba:	f000 fb7c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2120      	movs	r1, #32
 80015c2:	4827      	ldr	r0, [pc, #156]	; (8001660 <toggleLED+0x12c>)
 80015c4:	f000 fb77 	bl	8001cb6 <HAL_GPIO_WritePin>
		if(counter1 > 0){
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <toggleLED+0x130>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dd04      	ble.n	80015da <toggleLED+0xa6>
			counter1--;
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <toggleLED+0x130>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4a23      	ldr	r2, [pc, #140]	; (8001664 <toggleLED+0x130>)
 80015d8:	6013      	str	r3, [r2, #0]
		}
		if(counter1 <= 0){
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <toggleLED+0x130>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	dc0a      	bgt.n	80015f8 <toggleLED+0xc4>
			counter1 = 50;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <toggleLED+0x130>)
 80015e4:	2232      	movs	r2, #50	; 0x32
 80015e6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin ( YELLOW1_GPIO_Port , YELLOW1_Pin );
 80015e8:	2102      	movs	r1, #2
 80015ea:	481d      	ldr	r0, [pc, #116]	; (8001660 <toggleLED+0x12c>)
 80015ec:	f000 fb7b 	bl	8001ce6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin ( YELLOW2_GPIO_Port , YELLOW2_Pin );
 80015f0:	2110      	movs	r1, #16
 80015f2:	481b      	ldr	r0, [pc, #108]	; (8001660 <toggleLED+0x12c>)
 80015f4:	f000 fb77 	bl	8001ce6 <HAL_GPIO_TogglePin>
		}
	}
	if(Mode == 4 ){
 80015f8:	4b18      	ldr	r3, [pc, #96]	; (800165c <toggleLED+0x128>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d12b      	bne.n	8001658 <toggleLED+0x124>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2101      	movs	r1, #1
 8001604:	4816      	ldr	r0, [pc, #88]	; (8001660 <toggleLED+0x12c>)
 8001606:	f000 fb56 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2102      	movs	r1, #2
 800160e:	4814      	ldr	r0, [pc, #80]	; (8001660 <toggleLED+0x12c>)
 8001610:	f000 fb51 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8001614:	2201      	movs	r2, #1
 8001616:	2108      	movs	r1, #8
 8001618:	4811      	ldr	r0, [pc, #68]	; (8001660 <toggleLED+0x12c>)
 800161a:	f000 fb4c 	bl	8001cb6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 800161e:	2201      	movs	r2, #1
 8001620:	2110      	movs	r1, #16
 8001622:	480f      	ldr	r0, [pc, #60]	; (8001660 <toggleLED+0x12c>)
 8001624:	f000 fb47 	bl	8001cb6 <HAL_GPIO_WritePin>
		if(counter1 > 0){
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <toggleLED+0x130>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dd04      	ble.n	800163a <toggleLED+0x106>
			counter1--;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <toggleLED+0x130>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3b01      	subs	r3, #1
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <toggleLED+0x130>)
 8001638:	6013      	str	r3, [r2, #0]
		}
		if(counter1 <= 0){
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <toggleLED+0x130>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	dc0a      	bgt.n	8001658 <toggleLED+0x124>
			counter1 = 50;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <toggleLED+0x130>)
 8001644:	2232      	movs	r2, #50	; 0x32
 8001646:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin ( GREEN1_GPIO_Port , GREEN1_Pin );
 8001648:	2104      	movs	r1, #4
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <toggleLED+0x12c>)
 800164c:	f000 fb4b 	bl	8001ce6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin ( GREEN2_GPIO_Port , GREEN2_Pin );
 8001650:	2120      	movs	r1, #32
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <toggleLED+0x12c>)
 8001654:	f000 fb47 	bl	8001ce6 <HAL_GPIO_TogglePin>
		}
	}
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000048 	.word	0x20000048
 8001660:	40010800 	.word	0x40010800
 8001664:	20000050 	.word	0x20000050

08001668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800166c:	4a0d      	ldr	r2, [pc, #52]	; (80016a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800166e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001670:	e002      	b.n	8001678 <LoopCopyDataInit>

08001672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001676:	3304      	adds	r3, #4

08001678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800167c:	d3f9      	bcc.n	8001672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001680:	4c0a      	ldr	r4, [pc, #40]	; (80016ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001684:	e001      	b.n	800168a <LoopFillZerobss>

08001686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001688:	3204      	adds	r2, #4

0800168a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800168c:	d3fb      	bcc.n	8001686 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800168e:	f7ff ff4b 	bl	8001528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f001 fb0d 	bl	8002cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001696:	f7ff fd23 	bl	80010e0 <main>
  bx lr
 800169a:	4770      	bx	lr
  ldr r0, =_sdata
 800169c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80016a4:	08002d48 	.word	0x08002d48
  ldr r2, =_sbss
 80016a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016ac:	200000e0 	.word	0x200000e0

080016b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016b0:	e7fe      	b.n	80016b0 <ADC1_2_IRQHandler>
	...

080016b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_Init+0x28>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_Init+0x28>)
 80016be:	f043 0310 	orr.w	r3, r3, #16
 80016c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f923 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fea2 	bl	8001418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40022000 	.word	0x40022000

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	; (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 f93b 	bl	800197a <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 f903 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	; (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000004c 	.word	0x2000004c
 8001738:	20000058 	.word	0x20000058
 800173c:	20000054 	.word	0x20000054

08001740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_IncTick+0x1c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_IncTick+0x20>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a03      	ldr	r2, [pc, #12]	; (8001760 <HAL_IncTick+0x20>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	20000058 	.word	0x20000058
 8001760:	200000dc 	.word	0x200000dc

08001764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b02      	ldr	r3, [pc, #8]	; (8001774 <HAL_GetTick+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	200000dc 	.word	0x200000dc

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4906      	ldr	r1, [pc, #24]	; (8001810 <__NVIC_EnableIRQ+0x34>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	; (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	; (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	; 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	; 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bc80      	pop	{r7}
 80018ca:	4770      	bx	lr

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff90 	bl	8001814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff2d 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff42 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff90 	bl	8001868 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5f 	bl	8001814 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff35 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001994:	b480      	push	{r7}
 8001996:	b08b      	sub	sp, #44	; 0x2c
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e148      	b.n	8001c3a <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019a8:	2201      	movs	r2, #1
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	69fa      	ldr	r2, [r7, #28]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	f040 8137 	bne.w	8001c34 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4aa3      	ldr	r2, [pc, #652]	; (8001c58 <HAL_GPIO_Init+0x2c4>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d05e      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019d0:	4aa1      	ldr	r2, [pc, #644]	; (8001c58 <HAL_GPIO_Init+0x2c4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d875      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019d6:	4aa1      	ldr	r2, [pc, #644]	; (8001c5c <HAL_GPIO_Init+0x2c8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d058      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019dc:	4a9f      	ldr	r2, [pc, #636]	; (8001c5c <HAL_GPIO_Init+0x2c8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d86f      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019e2:	4a9f      	ldr	r2, [pc, #636]	; (8001c60 <HAL_GPIO_Init+0x2cc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d052      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019e8:	4a9d      	ldr	r2, [pc, #628]	; (8001c60 <HAL_GPIO_Init+0x2cc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d869      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019ee:	4a9d      	ldr	r2, [pc, #628]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d04c      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 80019f4:	4a9b      	ldr	r2, [pc, #620]	; (8001c64 <HAL_GPIO_Init+0x2d0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d863      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 80019fa:	4a9b      	ldr	r2, [pc, #620]	; (8001c68 <HAL_GPIO_Init+0x2d4>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d046      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
 8001a00:	4a99      	ldr	r2, [pc, #612]	; (8001c68 <HAL_GPIO_Init+0x2d4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d85d      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d82a      	bhi.n	8001a60 <HAL_GPIO_Init+0xcc>
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d859      	bhi.n	8001ac2 <HAL_GPIO_Init+0x12e>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <HAL_GPIO_Init+0x80>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a8f 	.word	0x08001a8f
 8001a18:	08001a69 	.word	0x08001a69
 8001a1c:	08001a7b 	.word	0x08001a7b
 8001a20:	08001abd 	.word	0x08001abd
 8001a24:	08001ac3 	.word	0x08001ac3
 8001a28:	08001ac3 	.word	0x08001ac3
 8001a2c:	08001ac3 	.word	0x08001ac3
 8001a30:	08001ac3 	.word	0x08001ac3
 8001a34:	08001ac3 	.word	0x08001ac3
 8001a38:	08001ac3 	.word	0x08001ac3
 8001a3c:	08001ac3 	.word	0x08001ac3
 8001a40:	08001ac3 	.word	0x08001ac3
 8001a44:	08001ac3 	.word	0x08001ac3
 8001a48:	08001ac3 	.word	0x08001ac3
 8001a4c:	08001ac3 	.word	0x08001ac3
 8001a50:	08001ac3 	.word	0x08001ac3
 8001a54:	08001ac3 	.word	0x08001ac3
 8001a58:	08001a71 	.word	0x08001a71
 8001a5c:	08001a85 	.word	0x08001a85
 8001a60:	4a82      	ldr	r2, [pc, #520]	; (8001c6c <HAL_GPIO_Init+0x2d8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d013      	beq.n	8001a8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a66:	e02c      	b.n	8001ac2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e029      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	3304      	adds	r3, #4
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e024      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	3308      	adds	r3, #8
 8001a80:	623b      	str	r3, [r7, #32]
          break;
 8001a82:	e01f      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	330c      	adds	r3, #12
 8001a8a:	623b      	str	r3, [r7, #32]
          break;
 8001a8c:	e01a      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d102      	bne.n	8001a9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a96:	2304      	movs	r3, #4
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e013      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d105      	bne.n	8001ab0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	611a      	str	r2, [r3, #16]
          break;
 8001aae:	e009      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	615a      	str	r2, [r3, #20]
          break;
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
          break;
 8001ac0:	e000      	b.n	8001ac4 <HAL_GPIO_Init+0x130>
          break;
 8001ac2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d801      	bhi.n	8001ace <HAL_GPIO_Init+0x13a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	e001      	b.n	8001ad2 <HAL_GPIO_Init+0x13e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2bff      	cmp	r3, #255	; 0xff
 8001ad8:	d802      	bhi.n	8001ae0 <HAL_GPIO_Init+0x14c>
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	e002      	b.n	8001ae6 <HAL_GPIO_Init+0x152>
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3b08      	subs	r3, #8
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	210f      	movs	r1, #15
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	6a39      	ldr	r1, [r7, #32]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	fa01 f303 	lsl.w	r3, r1, r3
 8001b00:	431a      	orrs	r2, r3
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 8090 	beq.w	8001c34 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b14:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_GPIO_Init+0x2dc>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_GPIO_Init+0x2dc>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_GPIO_Init+0x2dc>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b2c:	4a51      	ldr	r2, [pc, #324]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a49      	ldr	r2, [pc, #292]	; (8001c78 <HAL_GPIO_Init+0x2e4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00d      	beq.n	8001b74 <HAL_GPIO_Init+0x1e0>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2e8>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d007      	beq.n	8001b70 <HAL_GPIO_Init+0x1dc>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a47      	ldr	r2, [pc, #284]	; (8001c80 <HAL_GPIO_Init+0x2ec>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d101      	bne.n	8001b6c <HAL_GPIO_Init+0x1d8>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e004      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e002      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_GPIO_Init+0x1e2>
 8001b74:	2300      	movs	r3, #0
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	f002 0203 	and.w	r2, r2, #3
 8001b7c:	0092      	lsls	r2, r2, #2
 8001b7e:	4093      	lsls	r3, r2
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b86:	493b      	ldr	r1, [pc, #236]	; (8001c74 <HAL_GPIO_Init+0x2e0>)
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	089b      	lsrs	r3, r3, #2
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d006      	beq.n	8001bae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ba0:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4937      	ldr	r1, [pc, #220]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e006      	b.n	8001bbc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	4933      	ldr	r1, [pc, #204]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	492d      	ldr	r1, [pc, #180]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd6:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	4929      	ldr	r1, [pc, #164]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001be0:	4013      	ands	r3, r2
 8001be2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d006      	beq.n	8001bfe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4923      	ldr	r1, [pc, #140]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	608b      	str	r3, [r1, #8]
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfe:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	491f      	ldr	r1, [pc, #124]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d006      	beq.n	8001c26 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c18:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	4919      	ldr	r1, [pc, #100]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
 8001c24:	e006      	b.n	8001c34 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	4915      	ldr	r1, [pc, #84]	; (8001c84 <HAL_GPIO_Init+0x2f0>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	3301      	adds	r3, #1
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f47f aeaf 	bne.w	80019a8 <HAL_GPIO_Init+0x14>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	bf00      	nop
 8001c4e:	372c      	adds	r7, #44	; 0x2c
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	10320000 	.word	0x10320000
 8001c5c:	10310000 	.word	0x10310000
 8001c60:	10220000 	.word	0x10220000
 8001c64:	10210000 	.word	0x10210000
 8001c68:	10120000 	.word	0x10120000
 8001c6c:	10110000 	.word	0x10110000
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	40010800 	.word	0x40010800
 8001c7c:	40010c00 	.word	0x40010c00
 8001c80:	40011000 	.word	0x40011000
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	73fb      	strb	r3, [r7, #15]
 8001ca4:	e001      	b.n	8001caa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	807b      	strh	r3, [r7, #2]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc6:	787b      	ldrb	r3, [r7, #1]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ccc:	887a      	ldrh	r2, [r7, #2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd2:	e003      	b.n	8001cdc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd4:	887b      	ldrh	r3, [r7, #2]
 8001cd6:	041a      	lsls	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	611a      	str	r2, [r3, #16]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf8:	887a      	ldrh	r2, [r7, #2]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	400b      	ands	r3, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	611a      	str	r2, [r3, #16]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e26c      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d38:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d00c      	beq.n	8001d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d44:	4b8f      	ldr	r3, [pc, #572]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f003 030c 	and.w	r3, r3, #12
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d112      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
 8001d50:	4b8c      	ldr	r3, [pc, #560]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d10b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d06c      	beq.n	8001e44 <HAL_RCC_OscConfig+0x12c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d168      	bne.n	8001e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e246      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x76>
 8001d80:	4b80      	ldr	r3, [pc, #512]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a7f      	ldr	r2, [pc, #508]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	e02e      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <HAL_RCC_OscConfig+0x98>
 8001d96:	4b7b      	ldr	r3, [pc, #492]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7a      	ldr	r2, [pc, #488]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a77      	ldr	r2, [pc, #476]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e01d      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0xbc>
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a71      	ldr	r2, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a6e      	ldr	r2, [pc, #440]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0xd4>
 8001dd4:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6a      	ldr	r2, [pc, #424]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a67      	ldr	r2, [pc, #412]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d013      	beq.n	8001e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fcb6 	bl	8001764 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dfc:	f7ff fcb2 	bl	8001764 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b64      	cmp	r3, #100	; 0x64
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e1fa      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b5d      	ldr	r3, [pc, #372]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0xe4>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fca2 	bl	8001764 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fc9e 	bl	8001764 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e1e6      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x10c>
 8001e42:	e000      	b.n	8001e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d063      	beq.n	8001f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e52:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 030c 	and.w	r3, r3, #12
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00b      	beq.n	8001e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e5e:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d11c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d116      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	4b43      	ldr	r3, [pc, #268]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d005      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e1ba      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4939      	ldr	r1, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea2:	e03a      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d020      	beq.n	8001eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eac:	4b36      	ldr	r3, [pc, #216]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff fc57 	bl	8001764 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7ff fc53 	bl	8001764 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e19b      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b2a      	ldr	r3, [pc, #168]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4927      	ldr	r1, [pc, #156]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fc36 	bl	8001764 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001efc:	f7ff fc32 	bl	8001764 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e17a      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d03a      	beq.n	8001f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d019      	beq.n	8001f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f2e:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fc16 	bl	8001764 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f3c:	f7ff fc12 	bl	8001764 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e15a      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f000 faa6 	bl	80024ac <RCC_Delay>
 8001f60:	e01c      	b.n	8001f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fbfc 	bl	8001764 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f6e:	e00f      	b.n	8001f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f70:	f7ff fbf8 	bl	8001764 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d908      	bls.n	8001f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e140      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000
 8001f88:	42420000 	.word	0x42420000
 8001f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b9e      	ldr	r3, [pc, #632]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e9      	bne.n	8001f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a6 	beq.w	80020f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b97      	ldr	r3, [pc, #604]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10d      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b94      	ldr	r3, [pc, #592]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	4a93      	ldr	r2, [pc, #588]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	61d3      	str	r3, [r2, #28]
 8001fc6:	4b91      	ldr	r3, [pc, #580]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d118      	bne.n	8002014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe2:	4b8b      	ldr	r3, [pc, #556]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a8a      	ldr	r2, [pc, #552]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fee:	f7ff fbb9 	bl	8001764 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	e008      	b.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff6:	f7ff fbb5 	bl	8001764 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	2b64      	cmp	r3, #100	; 0x64
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e0fd      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_OscConfig+0x4f8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0f0      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d106      	bne.n	800202a <HAL_RCC_OscConfig+0x312>
 800201c:	4b7b      	ldr	r3, [pc, #492]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4a7a      	ldr	r2, [pc, #488]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6213      	str	r3, [r2, #32]
 8002028:	e02d      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x334>
 8002032:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a75      	ldr	r2, [pc, #468]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6213      	str	r3, [r2, #32]
 800203e:	4b73      	ldr	r3, [pc, #460]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4a72      	ldr	r2, [pc, #456]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6213      	str	r3, [r2, #32]
 800204a:	e01c      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b05      	cmp	r3, #5
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x356>
 8002054:	4b6d      	ldr	r3, [pc, #436]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a6c      	ldr	r2, [pc, #432]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800205a:	f043 0304 	orr.w	r3, r3, #4
 800205e:	6213      	str	r3, [r2, #32]
 8002060:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a69      	ldr	r2, [pc, #420]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002066:	f043 0301 	orr.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	e00b      	b.n	8002086 <HAL_RCC_OscConfig+0x36e>
 800206e:	4b67      	ldr	r3, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	4a66      	ldr	r2, [pc, #408]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6213      	str	r3, [r2, #32]
 800207a:	4b64      	ldr	r3, [pc, #400]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	4a63      	ldr	r2, [pc, #396]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002080:	f023 0304 	bic.w	r3, r3, #4
 8002084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff fb69 	bl	8001764 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7ff fb65 	bl	8001764 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e0ab      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	4b57      	ldr	r3, [pc, #348]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0ee      	beq.n	8002096 <HAL_RCC_OscConfig+0x37e>
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ba:	f7ff fb53 	bl	8001764 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff fb4f 	bl	8001764 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e095      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ee      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d105      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ea:	4b48      	ldr	r3, [pc, #288]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a47      	ldr	r2, [pc, #284]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8081 	beq.w	8002202 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002100:	4b42      	ldr	r3, [pc, #264]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d061      	beq.n	80021d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b02      	cmp	r3, #2
 8002112:	d146      	bne.n	80021a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002114:	4b3f      	ldr	r3, [pc, #252]	; (8002214 <HAL_RCC_OscConfig+0x4fc>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211a:	f7ff fb23 	bl	8001764 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002122:	f7ff fb1f 	bl	8001764 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e067      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1f0      	bne.n	8002122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d108      	bne.n	800215c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800214a:	4b30      	ldr	r3, [pc, #192]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	492d      	ldr	r1, [pc, #180]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4b2b      	ldr	r3, [pc, #172]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a19      	ldr	r1, [r3, #32]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	430b      	orrs	r3, r1
 800216e:	4927      	ldr	r1, [pc, #156]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_OscConfig+0x4fc>)
 8002176:	2201      	movs	r2, #1
 8002178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff faf3 	bl	8001764 <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002182:	f7ff faef 	bl	8001764 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e037      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCC_OscConfig+0x46a>
 80021a0:	e02f      	b.n	8002202 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <HAL_RCC_OscConfig+0x4fc>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fadc 	bl	8001764 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b0:	f7ff fad8 	bl	8001764 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e020      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x498>
 80021ce:	e018      	b.n	8002202 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e013      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x4f4>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d001      	beq.n	8002202 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3718      	adds	r7, #24
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40021000 	.word	0x40021000
 8002210:	40007000 	.word	0x40007000
 8002214:	42420060 	.word	0x42420060

08002218 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0d0      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d910      	bls.n	800225c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b67      	ldr	r3, [pc, #412]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 0207 	bic.w	r2, r3, #7
 8002242:	4965      	ldr	r1, [pc, #404]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b63      	ldr	r3, [pc, #396]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0b8      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d020      	beq.n	80022aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002274:	4b59      	ldr	r3, [pc, #356]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a52      	ldr	r2, [pc, #328]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002296:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b50      	ldr	r3, [pc, #320]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	494d      	ldr	r1, [pc, #308]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d040      	beq.n	8002338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022be:	4b47      	ldr	r3, [pc, #284]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d115      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e07f      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d6:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e073      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e6:	4b3d      	ldr	r3, [pc, #244]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e06b      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f6:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f023 0203 	bic.w	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	4936      	ldr	r1, [pc, #216]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7ff fa2c 	bl	8001764 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	e00a      	b.n	8002326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002310:	f7ff fa28 	bl	8001764 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	f241 3288 	movw	r2, #5000	; 0x1388
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e053      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 020c 	and.w	r2, r3, #12
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	429a      	cmp	r2, r3
 8002336:	d1eb      	bne.n	8002310 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d210      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b24      	ldr	r3, [pc, #144]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 0207 	bic.w	r2, r3, #7
 800234e:	4922      	ldr	r1, [pc, #136]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0307 	and.w	r3, r3, #7
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e032      	b.n	80023ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4916      	ldr	r1, [pc, #88]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	490e      	ldr	r1, [pc, #56]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023a6:	f000 f821 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 80023aa:	4602      	mov	r2, r0
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 030f 	and.w	r3, r3, #15
 80023b6:	490a      	ldr	r1, [pc, #40]	; (80023e0 <HAL_RCC_ClockConfig+0x1c8>)
 80023b8:	5ccb      	ldrb	r3, [r1, r3]
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <HAL_RCC_ClockConfig+0x1cc>)
 80023c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_ClockConfig+0x1d0>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff f98a 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40022000 	.word	0x40022000
 80023dc:	40021000 	.word	0x40021000
 80023e0:	08002d30 	.word	0x08002d30
 80023e4:	2000004c 	.word	0x2000004c
 80023e8:	20000054 	.word	0x20000054

080023ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	b490      	push	{r4, r7}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023f2:	4b2a      	ldr	r3, [pc, #168]	; (800249c <HAL_RCC_GetSysClockFreq+0xb0>)
 80023f4:	1d3c      	adds	r4, r7, #4
 80023f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023fc:	f240 2301 	movw	r3, #513	; 0x201
 8002400:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d002      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x40>
 8002426:	2b08      	cmp	r3, #8
 8002428:	d003      	beq.n	8002432 <HAL_RCC_GetSysClockFreq+0x46>
 800242a:	e02d      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800242c:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800242e:	623b      	str	r3, [r7, #32]
      break;
 8002430:	e02d      	b.n	800248e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	0c9b      	lsrs	r3, r3, #18
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800243e:	4413      	add	r3, r2
 8002440:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002444:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002450:	4b13      	ldr	r3, [pc, #76]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	0c5b      	lsrs	r3, r3, #17
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800245e:	4413      	add	r3, r2
 8002460:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002464:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246a:	fb02 f203 	mul.w	r2, r2, r3
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	fbb2 f3f3 	udiv	r3, r2, r3
 8002474:	627b      	str	r3, [r7, #36]	; 0x24
 8002476:	e004      	b.n	8002482 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	4a0b      	ldr	r2, [pc, #44]	; (80024a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800247c:	fb02 f303 	mul.w	r3, r2, r3
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	623b      	str	r3, [r7, #32]
      break;
 8002486:	e002      	b.n	800248e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800248a:	623b      	str	r3, [r7, #32]
      break;
 800248c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800248e:	6a3b      	ldr	r3, [r7, #32]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3728      	adds	r7, #40	; 0x28
 8002494:	46bd      	mov	sp, r7
 8002496:	bc90      	pop	{r4, r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	08002d20 	.word	0x08002d20
 80024a0:	40021000 	.word	0x40021000
 80024a4:	007a1200 	.word	0x007a1200
 80024a8:	003d0900 	.word	0x003d0900

080024ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <RCC_Delay+0x34>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <RCC_Delay+0x38>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a5b      	lsrs	r3, r3, #9
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024c8:	bf00      	nop
  }
  while (Delay --);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	1e5a      	subs	r2, r3, #1
 80024ce:	60fa      	str	r2, [r7, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1f9      	bne.n	80024c8 <RCC_Delay+0x1c>
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	2000004c 	.word	0x2000004c
 80024e4:	10624dd3 	.word	0x10624dd3

080024e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e041      	b.n	800257e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe ffb4 	bl	800147c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f000 fa6a 	bl	8002a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b01      	cmp	r3, #1
 800259a:	d001      	beq.n	80025a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e035      	b.n	800260c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_TIM_Base_Start_IT+0x90>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_TIM_Base_Start_IT+0x4e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ca:	d004      	beq.n	80025d6 <HAL_TIM_Base_Start_IT+0x4e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_TIM_Base_Start_IT+0x94>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d111      	bne.n	80025fa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b06      	cmp	r3, #6
 80025e6:	d010      	beq.n	800260a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f8:	e007      	b.n	800260a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f042 0201 	orr.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40000400 	.word	0x40000400

08002620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d122      	bne.n	800267c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b02      	cmp	r3, #2
 8002642:	d11b      	bne.n	800267c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0202 	mvn.w	r2, #2
 800264c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f9b1 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f9a4 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f9b3 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b04      	cmp	r3, #4
 8002688:	d122      	bne.n	80026d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b04      	cmp	r3, #4
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0204 	mvn.w	r2, #4
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f987 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f97a 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f989 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b08      	cmp	r3, #8
 80026dc:	d122      	bne.n	8002724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0208 	mvn.w	r2, #8
 80026f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2204      	movs	r2, #4
 80026fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f95d 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f950 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f95f 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b10      	cmp	r3, #16
 8002730:	d122      	bne.n	8002778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b10      	cmp	r3, #16
 800273e:	d11b      	bne.n	8002778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0210 	mvn.w	r2, #16
 8002748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2208      	movs	r2, #8
 800274e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f933 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002764:	e005      	b.n	8002772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f926 	bl	80029b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f935 	bl	80029dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b01      	cmp	r3, #1
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0301 	and.w	r3, r3, #1
 8002790:	2b01      	cmp	r3, #1
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0201 	mvn.w	r2, #1
 800279c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7fe fdac 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ae:	2b80      	cmp	r3, #128	; 0x80
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b80      	cmp	r3, #128	; 0x80
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fa67 	bl	8002c9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d10e      	bne.n	80027fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d107      	bne.n	80027fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f8f9 	bl	80029ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0320 	and.w	r3, r3, #32
 8002806:	2b20      	cmp	r3, #32
 8002808:	d10e      	bne.n	8002828 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 0320 	and.w	r3, r3, #32
 8002814:	2b20      	cmp	r3, #32
 8002816:	d107      	bne.n	8002828 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0220 	mvn.w	r2, #32
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fa32 	bl	8002c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_TIM_ConfigClockSource+0x18>
 8002844:	2302      	movs	r3, #2
 8002846:	e0b3      	b.n	80029b0 <HAL_TIM_ConfigClockSource+0x180>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002880:	d03e      	beq.n	8002900 <HAL_TIM_ConfigClockSource+0xd0>
 8002882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002886:	f200 8087 	bhi.w	8002998 <HAL_TIM_ConfigClockSource+0x168>
 800288a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288e:	f000 8085 	beq.w	800299c <HAL_TIM_ConfigClockSource+0x16c>
 8002892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002896:	d87f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 8002898:	2b70      	cmp	r3, #112	; 0x70
 800289a:	d01a      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0xa2>
 800289c:	2b70      	cmp	r3, #112	; 0x70
 800289e:	d87b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028a0:	2b60      	cmp	r3, #96	; 0x60
 80028a2:	d050      	beq.n	8002946 <HAL_TIM_ConfigClockSource+0x116>
 80028a4:	2b60      	cmp	r3, #96	; 0x60
 80028a6:	d877      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028a8:	2b50      	cmp	r3, #80	; 0x50
 80028aa:	d03c      	beq.n	8002926 <HAL_TIM_ConfigClockSource+0xf6>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d873      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028b0:	2b40      	cmp	r3, #64	; 0x40
 80028b2:	d058      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0x136>
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d86f      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028b8:	2b30      	cmp	r3, #48	; 0x30
 80028ba:	d064      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
 80028bc:	2b30      	cmp	r3, #48	; 0x30
 80028be:	d86b      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d060      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
 80028c4:	2b20      	cmp	r3, #32
 80028c6:	d867      	bhi.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05c      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
 80028cc:	2b10      	cmp	r3, #16
 80028ce:	d05a      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028d0:	e062      	b.n	8002998 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6899      	ldr	r1, [r3, #8]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f000 f95c 	bl	8002b9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028f4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	609a      	str	r2, [r3, #8]
      break;
 80028fe:	e04e      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	6899      	ldr	r1, [r3, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f000 f945 	bl	8002b9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	689a      	ldr	r2, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002922:	609a      	str	r2, [r3, #8]
      break;
 8002924:	e03b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6859      	ldr	r1, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	461a      	mov	r2, r3
 8002934:	f000 f8bc 	bl	8002ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2150      	movs	r1, #80	; 0x50
 800293e:	4618      	mov	r0, r3
 8002940:	f000 f913 	bl	8002b6a <TIM_ITRx_SetConfig>
      break;
 8002944:	e02b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6818      	ldr	r0, [r3, #0]
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6859      	ldr	r1, [r3, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	461a      	mov	r2, r3
 8002954:	f000 f8da 	bl	8002b0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2160      	movs	r1, #96	; 0x60
 800295e:	4618      	mov	r0, r3
 8002960:	f000 f903 	bl	8002b6a <TIM_ITRx_SetConfig>
      break;
 8002964:	e01b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	461a      	mov	r2, r3
 8002974:	f000 f89c 	bl	8002ab0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2140      	movs	r1, #64	; 0x40
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f8f3 	bl	8002b6a <TIM_ITRx_SetConfig>
      break;
 8002984:	e00b      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4619      	mov	r1, r3
 8002990:	4610      	mov	r0, r2
 8002992:	f000 f8ea 	bl	8002b6a <TIM_ITRx_SetConfig>
        break;
 8002996:	e002      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002998:	bf00      	nop
 800299a:	e000      	b.n	800299e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800299c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bc80      	pop	{r7}
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_Base_SetConfig+0xa8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <TIM_Base_SetConfig+0x28>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1e:	d003      	beq.n	8002a28 <TIM_Base_SetConfig+0x28>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a22      	ldr	r2, [pc, #136]	; (8002aac <TIM_Base_SetConfig+0xac>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d108      	bne.n	8002a3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <TIM_Base_SetConfig+0xa8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d007      	beq.n	8002a52 <TIM_Base_SetConfig+0x52>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d003      	beq.n	8002a52 <TIM_Base_SetConfig+0x52>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <TIM_Base_SetConfig+0xac>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d108      	bne.n	8002a64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <TIM_Base_SetConfig+0xa8>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d103      	bne.n	8002a98 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	615a      	str	r2, [r3, #20]
}
 8002a9e:	bf00      	nop
 8002aa0:	3714      	adds	r7, #20
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400

08002ab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	f023 0201 	bic.w	r2, r3, #1
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f023 030a 	bic.w	r3, r3, #10
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f023 0210 	bic.w	r2, r3, #16
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	031b      	lsls	r3, r3, #12
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	621a      	str	r2, [r3, #32]
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b085      	sub	sp, #20
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f043 0307 	orr.w	r3, r3, #7
 8002b8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	609a      	str	r2, [r3, #8]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	60f8      	str	r0, [r7, #12]
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	609a      	str	r2, [r3, #8]
}
 8002bd2:	bf00      	nop
 8002bd4:	371c      	adds	r7, #28
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e041      	b.n	8002c78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a14      	ldr	r2, [pc, #80]	; (8002c84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c40:	d004      	beq.n	8002c4c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a10      	ldr	r2, [pc, #64]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10c      	bne.n	8002c66 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000400 	.word	0x40000400

08002c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <__libc_init_array>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	4d0c      	ldr	r5, [pc, #48]	; (8002ce8 <__libc_init_array+0x38>)
 8002cb6:	4c0d      	ldr	r4, [pc, #52]	; (8002cec <__libc_init_array+0x3c>)
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	42a6      	cmp	r6, r4
 8002cbe:	d109      	bne.n	8002cd4 <__libc_init_array+0x24>
 8002cc0:	f000 f822 	bl	8002d08 <_init>
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	4d0a      	ldr	r5, [pc, #40]	; (8002cf0 <__libc_init_array+0x40>)
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	; (8002cf4 <__libc_init_array+0x44>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	42a6      	cmp	r6, r4
 8002cd0:	d105      	bne.n	8002cde <__libc_init_array+0x2e>
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd8:	4798      	blx	r3
 8002cda:	3601      	adds	r6, #1
 8002cdc:	e7ee      	b.n	8002cbc <__libc_init_array+0xc>
 8002cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce2:	4798      	blx	r3
 8002ce4:	3601      	adds	r6, #1
 8002ce6:	e7f2      	b.n	8002cce <__libc_init_array+0x1e>
 8002ce8:	08002d40 	.word	0x08002d40
 8002cec:	08002d40 	.word	0x08002d40
 8002cf0:	08002d40 	.word	0x08002d40
 8002cf4:	08002d44 	.word	0x08002d44

08002cf8 <memset>:
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4402      	add	r2, r0
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d100      	bne.n	8002d02 <memset+0xa>
 8002d00:	4770      	bx	lr
 8002d02:	f803 1b01 	strb.w	r1, [r3], #1
 8002d06:	e7f9      	b.n	8002cfc <memset+0x4>

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
